# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: combined_sr.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    Dict,
    List,
)

import betterproto


class AccountType(betterproto.Enum):
    ACCOUNT_MIHOYO_GUEST = 0
    ACCOUNT_MIHOYO = 1
    ACCOUNT_XIAOMI = 11
    ACCOUNT_COOLPAD = 12
    ACCOUNT_YYB = 13
    ACCOUNT_BILI = 14
    ACCOUNT_HUAWEI = 15
    ACCOUNT_MEIZU = 16
    ACCOUNT_360 = 17
    ACCOUNT_OPPO = 18
    ACCOUNT_VIVO = 19
    ACCOUNT_UC = 20
    ACCOUNT_WANDOJIA = 21
    ACCOUNT_LENOVO = 22
    ACCOUNT_JINLI = 23
    ACCOUNT_BAIDU = 25
    ACCOUNT_DANGLE = 26
    ACCOUNT_WEGAME = 27
    ACCOUNT_RPG_CUSTOM = 10000


class ChannelIdType(betterproto.Enum):
    CHANNEL_ID_NONE = 0
    CHANNEL_ID_MIHOYO = 1
    CHANNEL_ID_XIAOMI = 11
    CHANNEL_ID_COOLPAD = 12
    CHANNEL_ID_YYB = 13
    CHANNEL_ID_BILI = 14
    CHANNEL_ID_HUAWEI = 15
    CHANNEL_ID_MEIZU = 16
    CHANNEL_ID_360 = 17
    CHANNEL_ID_OPPO = 18
    CHANNEL_ID_VIVO = 19
    CHANNEL_ID_UC = 20
    CHANNEL_ID_WANDOJIA = 21
    CHANNEL_ID_LENOVO = 22
    CHANNEL_ID_JINLI = 23
    CHANNEL_ID_BAIDU = 25
    CHANNEL_ID_DANGLE = 26
    CHANNEL_ID_WEGAME = 27


class AvatarSlotType(betterproto.Enum):
    AVATAR_SLOT_1 = 0
    AVATAR_SLOT_2 = 1
    AVATAR_SLOT_3 = 2


class ItemType(betterproto.Enum):
    ITEM_TYPE_NONE = 0
    ITEM_AVATAR_CARD = 1
    ITEM_EQUIPMENT = 2
    ITEM_MATERIAL = 3
    ITEM_AVATAR_EXP = 4
    ITEM_RELIC = 5


class VirtualItemType(betterproto.Enum):
    VIRTUAL_ITEM_NONE = 0
    VIRTUAL_ITEM_HCOIN = 1
    VIRTUAL_ITEM_SCOIN = 2
    VIRTUAL_ITEM_MCOIN = 3
    VIRTUAL_ITEM_STAMINA = 11
    VIRTUAL_ITEM_EXP = 22
    VIRTUAL_ITEM_ROGUE_COIN = 31
    VIRTUAL_ITEM_ROGUE_STAMINA = 32
    VIRTUAL_ITEM_ROGUE_EXPLORE_EXP = 33
    VIRTUAL_ITEM_ACHIEVEMENT_EXP = 41
    VIRTUAL_ITEM_WARRIOR_EXP = 190
    VIRTUAL_ITEM_ROGUE_EXP = 191
    VIRTUAL_ITEM_MAGE_EXP = 192
    VIRTUAL_ITEM_SHAMAN_EXP = 193
    VIRTUAL_ITEM_WARLOCK_EXP = 194
    VIRTUAL_ITEM_KNIGHT_EXP = 195
    VIRTUAL_ITEM_PRIEST_EXP = 196


class BlackLimitLevel(betterproto.Enum):
    BLACK_LIMIT_LEVEL_ALL = 0


class AreaType(betterproto.Enum):
    AREA_NONE = 0
    AREA_CN = 1
    AREA_JP = 2
    AREA_ASIA = 3
    AREA_WEST = 4
    AREA_KR = 5
    AREA_OVERSEAS = 6


class EntityType(betterproto.Enum):
    ENTITY_NONE = 0
    ENTITY_AVATAR = 1
    ENTITY_MONSTER = 2
    ENTITY_NPC = 3
    ENTITY_PROP = 4
    ENTITY_TRIGGER = 5
    ENTITY_ENV = 6


class LanguageType(betterproto.Enum):
    LANGUAGE_NONE = 0
    LANGUAGE_SC = 1
    LANGUAGE_TC = 2
    LANGUAGE_EN = 3
    LANGUAGE_KR = 4
    LANGUAGE_JP = 5
    LANGUAGE_FR = 6
    LANGUAGE_DE = 7
    LANGUAGE_ES = 8
    LANGUAGE_PT = 9
    LANGUAGE_RU = 10
    LANGUAGE_TH = 11
    LANGUAGE_VI = 12
    LANGUAGE_ID = 13


class PlatformType(betterproto.Enum):
    EDITOR = 0
    IOS = 1
    ANDROID = 2
    PC = 3


class ReloginType(betterproto.Enum):
    NO_KICK = 0
    FORCE_KICK = 1
    IDLE_KICK = 2


class AvatarType(betterproto.Enum):
    AVATAR_TYPE_NONE = 0
    AVATAR_TRIAL_TYPE = 1
    AVATAR_LIMIT_TYPE = 2
    AVATAR_FORMAL_TYPE = 3


class HeroBasicType(betterproto.Enum):
    None_ = 0
    BoyWarrior = 8001
    GirlWarrior = 8002
    BoyKnight = 8003
    GirlKnight = 8004
    BoyRogue = 8005
    GirlRogue = 8006
    BoyMage = 8007
    GirlMage = 8008
    BoyShaman = 8009
    GirlShaman = 8010
    BoyWarlock = 8011
    GirlWarlock = 8012
    BoyPriest = 8013
    GirlPriest = 8014


class Gender(betterproto.Enum):
    GenderNone = 0
    GenderMan = 1
    GenderWoman = 2


class ProductType(betterproto.Enum):
    PRODUCT_NONE = 0
    PRODUCT_NORMAL = 1
    PRODUCT_LIMIT = 2


class ProductGiftType(betterproto.Enum):
    PRODUCT_GIFT_NONE = 0
    PRODUCT_GIFT_HCOIN = 1
    PRODUCT_GIFT_SUBSCRIPTION = 2


class FeatureSwitchType(betterproto.Enum):
    FEATURE_SWITCH_NONE = 0
    FEATURE_SWITCH_SHOP = 1
    FEATURE_SWITCH_LINEUP_NAME = 2


class BattleCheckStrategyType(betterproto.Enum):
    BATTLE_CHECK_STRATEGY_IDENTICAL = 0
    BATTLE_CHECK_STRATEGY_SERVER = 1
    BATTLE_CHECK_STRATEGY_CLIENT = 2


class BattleCheckResultType(betterproto.Enum):
    BATTLE_CHECK_RESULT_SUCC = 0
    BATTLE_CHECK_RESULT_FAIL = 1
    BATTLE_CHECK_RESULT_PASS = 2


class BattleModuleType(betterproto.Enum):
    BATTLE_MODULE_MAZE = 0
    BATTLE_MODULE_CHALLENGE = 1
    BATTLE_MODULE_COCOON = 2
    BATTLE_MODULE_ROGUE = 3
    BATTLE_MODULE_CHALLENGE_ACTIVITY = 4


class DeathSource(betterproto.Enum):
    UNKNOWN = 0
    KILLED_BY_OTHERS = 1
    KILLED_BY_SELF = 2
    ESCAPE = 3


class BattleTag(betterproto.Enum):
    TAG_NONE = 0
    TAG_HIDE_NPC_MONSTER = 1


class BattleEndStatus(betterproto.Enum):
    BATTLE_END_NONE = 0
    BATTLE_END_WIN = 1
    BATTLE_END_LOSE = 2
    BATTLE_END_QUIT = 3


class Retcode(betterproto.Enum):
    RET_SUCC = 0
    RET_FAIL = 1
    RET_SERVER_INTERNAL_ERROR = 2
    RET_TIMEOUT = 3
    RET_REPEATED_REQ = 4
    RET_REQ_PARA_INVALID = 5
    RET_PLAYER_DATA_ERROR = 6
    RET_PLAYER_CLIENT_PAUSED = 7
    RET_FUNC_CHECK_FAILED = 8
    RET_FEATURE_SWITCH_CLOSED = 9
    RET_REPEATE_LOGIN = 1000
    RET_RETRY_LOGIN = 1001
    RET_WAIT_LOGIN = 1002
    RET_NOT_IN_WHITE_LIST = 1003
    RET_IN_BLACK_LIST = 1004
    RET_ACCOUNT_VERIFY_ERROR = 1005
    RET_ACCOUNT_PARA_ERROR = 1006
    RET_ANTI_ADDICT_LOGIN = 1007
    RET_CHECK_SUM_ERROR = 1008
    RET_REACH_MAX_PLAYER_NUM = 1009
    RET_ALREADY_REGISTERED = 1010
    RET_GENDER_ERROR = 1011
    SET_NICKNAME_RET_CALLBACK_PROCESSING = 1012
    RET_IN_GM_BIND_ACCESS = 1013
    RET_QUEST_REWARD_ALREADY_TAKEN = 1100
    RET_QUEST_NOT_ACCEPT = 1101
    RET_QUEST_NOT_FINISH = 1102
    RET_QUEST_STATUS_ERROR = 1103
    RET_ACHIEVEMENT_LEVEL_NOT_REACH = 1104
    RET_ACHIEVEMENT_LEVEL_ALREADY_TAKEN = 1105
    RET_AVATAR_NOT_EXIST = 1200
    RET_AVATAR_RES_EXP_NOT_ENOUGH = 1201
    RET_AVATAR_EXP_REACH_PROMOTION_LIMIT = 1202
    RET_AVATAR_REACH_MAX_PROMOTION = 1203
    RET_SKILLTREE_CONFIG_NOT_EXIST = 1204
    RET_SKILLTREE_ALREADY_UNLOCK = 1205
    RET_SKILLTREE_PRE_LOCKED = 1206
    RET_SKILLTREE_LEVEL_NOT_MEET = 1207
    RET_SKILLTREE_RANK_NOT_MEET = 1208
    RET_AVATAR_DRESS_NO_EQUIPMENT = 1209
    RET_AVATAR_EXP_ITEM_NOT_EXIST = 1210
    RET_SKILLTREE_POINT_UNLOCK = 1211
    RET_SKILLTREE_POINT_LEVEL_UPGRADE_NOT_MATCH = 1212
    RET_SKILLTREE_POINT_LEVEL_REACH_MAX = 1213
    RET_WORLD_LEVEL_NOT_MEET = 1214
    RET_PLAYER_LEVEL_NOT_MEET = 1215
    RET_AVATAR_RANK_NOT_MATCH = 1216
    RET_AVATAR_RANK_REACH_MAX = 1217
    RET_HERO_BASIC_TYPE_NOT_MATCH = 1218
    RET_ITEM_NOT_EXIST = 1300
    RET_ITEM_COST_NOT_ENOUGH = 1301
    RET_ITEM_COST_TOO_MUCH = 1302
    RET_ITEM_NO_COST = 1303
    RET_ITEM_NOT_ENOUGH = 1304
    RET_ITEM_INVALID = 1305
    RET_ITEM_CONFIG_NOT_EXIST = 1306
    RET_SCOIN_NOT_ENOUGH = 1307
    RET_ITEM_REWARD_EXCEED_LIMIT = 1308
    RET_ITEM_INVALID_USE = 1309
    RET_ITEM_USE_CONFIG_NOT_EXIST = 1310
    RET_REWARD_CONFIG_NOT_EXIST = 1311
    RET_ITEM_EXCEED_LIMIT = 1312
    RET_ITEM_COUNT_INVALID = 1313
    RET_ITEM_USE_TARGET_TYPE_INVALID = 1314
    RET_ITEM_USE_SATIETY_FULL = 1315
    RET_ITEM_COMPOSE_NOT_EXIST = 1316
    RET_RELIC_COMPOSE_NOT_EXIST = 1317
    RET_ITEM_CAN_NOT_SELL = 1318
    RET_ITEM_SELL_EXCEDD_LIMIT = 1319
    RET_EQUIPMENT_ALREADY_DRESSED = 1350
    RET_EQUIPMENT_NOT_EXIST = 1351
    RET_EQUIPMENT_REACH_LEVEL_LIMIT = 1352
    RET_EQUIPMENT_CONSUME_SELF = 1353
    RET_EQUIPMENT_ALREADY_LOCKED = 1354
    RET_EQUIPMENT_ALREADY_UNLOCKED = 1355
    RET_EQUIPMENT_LOCKED = 1356
    RET_EQUIPMENT_SELECT_NUM_OVER_LIMIT = 1357
    RET_EQUIPMENT_RANK_UP_MUST_CONSUME_SAME_TID = 1358
    RET_EQUIPMENT_PROMOTION_REACH_MAX = 1359
    RET_EQUIPMENT_RANK_UP_REACH_MAX = 1360
    RET_EQUIPMENT_LEVEL_REACH_MAX = 1361
    RET_EQUIPMENT_EXCEED_LIMIT = 1362
    RET_RELIC_NOT_EXIST = 1363
    RET_RELIC_REACH_LEVEL_LIMIT = 1364
    RET_RELIC_CONSUME_SELF = 1365
    RET_RELIC_ALREADY_DRESSED = 1366
    RET_RELIC_LOCKED = 1367
    RET_RELIC_ALREADY_LOCKED = 1368
    RET_RELIC_ALREADY_UNLOCKED = 1369
    RET_RELIC_LEVEL_IS_NOT_ZERO = 1370
    RET_LINEUP_INVALID_INDEX = 1400
    RET_LINEUP_INVALID_MEMBER_POS = 1401
    RET_LINEUP_SWAP_NOT_EXIST = 1402
    RET_LINEUP_AVATAR_ALREADY_IN = 1403
    RET_LINEUP_CREATE_AVATAR_ERROR = 1404
    RET_LINEUP_AVATAR_INIT_ERROR = 1405
    RET_LINEUP_NOT_EXIST = 1406
    RET_LINEUP_ONLY_ONE_MEMBER = 1407
    RET_LINEUP_SAME_LEADER_SLOT = 1408
    RET_LINEUP_NO_LEADER_SELECT = 1409
    RET_LINEUP_SWAP_SAME_SLOT = 1410
    RET_LINEUP_AVATAR_NOT_EXIST = 1411
    RET_LINEUP_TRIAL_AVATAR_CAN_NOT_QUIT = 1412
    RET_LINEUP_VIRTUAL_LINEUP_PLANE_NOT_MATCH = 1413
    RET_LINEUP_NOT_VALID_LEADER = 1414
    RET_LINEUP_SAME_INDEX = 1415
    RET_LINEUP_IS_EMPTY = 1416
    RET_LINEUP_NAME_FORMAT_ERROR = 1417
    RET_LINEUP_TYPE_NOT_MATCH = 1418
    RET_LINEUP_REPLACE_ALL_FAILED = 1419
    RET_LINEUP_NOT_ALLOW_EDIT = 1420
    RET_LINEUP_AVATAR_IS_ALIVE = 1421
    RET_MAIL_NOT_EXIST = 1700
    RET_MAIL_RANGE_INVALID = 1701
    RET_MAIL_MAIL_ID_INVALID = 1702
    RET_MAIL_NO_MAIL_TAKE_ATTACHMENT = 1703
    RET_MAIL_NO_MAIL_TO_DEL = 1704
    RET_STAGE_SETTLE_ERROR = 1800
    RET_STAGE_CONFIG_NOT_EXIST = 1801
    RET_STAGE_NOT_FOUND = 1802
    RET_STAGE_COCOON_PROP_NOT_VALID = 1804
    RET_STAGE_COCOON_WAVE_NOT_VALID = 1805
    RET_STAGE_PROP_ID_NOT_EQUAL = 1806
    RET_STAGE_COCOON_WAVE_OVER = 1807
    RET_STAGE_WEEK_COCOON_OVER_CNT = 1808
    RET_STAGE_COCOON_NOT_OPEN = 1809
    RET_CHAPTER_LOCK = 1900
    RET_CHAPTER_CHALLENGE_NUM_NOT_ENOUGH = 1901
    RET_CHAPTER_REWARD_ID_NOT_EXIST = 1902
    RET_CHAPTER_REWARD_ALREADY_TAKEN = 1903
    RET_BATTLE_STAGE_NOT_MATCH = 2000
    RET_IN_BATTLE_NOW = 2001
    RET_BATTLE_CHEAT = 2002
    RET_BATTLE_FAIL = 2003
    RET_BATTLE_NO_LINEUP = 2004
    RET_BATTLE_LINEUP_EMPTY = 2005
    RET_BATTLE_VERSION_NOT_MATCH = 2006
    RET_BATTLE_QUIT_BY_SERVER = 2007
    RET_LACK_EXCHANGE_STAMINA_TIMES = 2100
    RET_LACK_STAMINA = 2101
    RET_STAMINA_FULL = 2102
    RET_AUTHKEY_SIGN_TYPE_ERROR = 2103
    RET_AUTHKEY_SIGN_VER_ERROR = 2104
    RET_NICKNAME_FORMAT_ERROR = 2105
    RET_SENSITIVE_WORDS = 2106
    RET_LEVEL_REWARD_HAS_TAKEN = 2107
    RET_LEVEL_REWARD_LEVEL_ERROR = 2108
    RET_LANGUAGE_INVALID = 2109
    RET_MAZE_NOT_FINISH = 2200
    RET_MAZE_LACK_TICKET = 2201
    RET_MAZE_NOT_UNLOCK = 2202
    RET_MAZE_DIFFICULTY_LIMIT = 2203
    RET_MAZE_NO_ABILITY = 2204
    RET_MAZE_NO_PLANE = 2205
    RET_MAZE_STAGE_DISMATCH = 2206
    RET_MAZE_MAP_NOT_EXIST = 2207
    RET_MAZE_TYPE_NOT_EXIST = 2208
    RET_MAZE_ALREADY_FINISH = 2209
    RET_MAZE_PROP_NOT_EXIST = 2210
    RET_MAZE_POSITION_TOO_FAR = 2211
    RET_MAZE_SKILL_CAST_CNT_REACH_MAX = 2212
    RET_MAZE_MP_NOT_ENOUGH = 2213
    RET_SPRING_NOT_ENABLE = 2214
    RET_SPRING_REFRESH_IN_CD = 2215
    RET_SPRING_TOO_FAR = 2216
    RET_MAZE_NO_FLOOR = 2217
    RET_NOT_IN_MAZE = 2218
    RET_PLANE_ID_NOT_MATCH = 2219
    RET_FLOOR_ID_NOT_MATCH = 2220
    RET_SAVEPOINTS_TIMES_ZERO = 2221
    RET_MAZE_TIME_OF_DAY_TYPE_IS_SAME = 2222
    RET_MAZE_TIME_OF_DAY_TYPE_ERROR = 2223
    RET_PLOT_NOT_UNLOCK = 2300
    RET_MISSION_NOT_EXIST = 2400
    RET_MISSION_ALREADY_DONE = 2401
    RET_DAILY_TASK_NOT_FINISH = 2402
    RET_DAILY_TASK_REWARD_HAS_TAKEN = 2403
    RET_MISSION_NOT_FINISH = 2404
    RET_MISSION_NOT_DOING = 2405
    RET_MISSION_FINISH_WAY_NOT_MATCH = 2406
    RET_MISSION_SCENE_NOT_MATCH = 2407
    RET_ADVENTURE_MAP_NOT_EXIST = 2500
    RET_SCENE_ENTITY_NOT_EXIST = 2600
    RET_NOT_IN_SCENE = 2601
    RET_SCENE_MONSTER_NOT_EXIST = 2602
    RET_INTERACT_CONFIG_NOT_EXIST = 2603
    RET_UNSUPPORTED_PROP_STATE = 2604
    RET_SCENE_ENTRY_ID_NOT_MATCH = 2605
    RET_ASSIST_MONSTER_COUNT_LIMIT = 2607
    RET_SCENE_USE_SKILL_FAIL = 2608
    RET_PROP_IS_HIDDEN = 2609
    RET_LOADING_SUCC_ALREADY = 2610
    RET_SCENE_ENTITY_TYPE_INVALID = 2611
    RET_INTERACT_TYPE_INVALID = 2612
    RET_INTERACT_NOT_IN_REGION = 2613
    RET_INTERACT_SUB_TYPE_INVALID = 2614
    RET_NOT_LEADER_ENTITY = 2615
    RET_MONSTER_IS_NOT_FARM_ELEMENT = 2616
    RET_MONSTER_CONFIG_NOT_EXIST = 2617
    RET_AVATAR_HP_ALREADY_FULL = 2618
    RET_BUY_TIMES_LIMIT = 2700
    RET_BUY_LIMIT_TYPE = 2701
    RET_SHOP_NOT_OPEN = 2702
    RET_GOODS_NOT_OPEN = 2703
    RET_TUTORIAL_NOT_UNLOCK = 2751
    RET_TUTORIAL_UNLOCK_ALREADY = 2752
    RET_TUTORIAL_FINISH_ALREADY = 2753
    RET_TUTORIAL_PRE_NOT_UNLOCK = 2754
    RET_TUTORIAL_PLAYER_LEVEL_NOT_MATCH = 2755
    RET_TUTORIAL_TUTORIAL_NOT_FOUND = 2756
    RET_CHALLENGE_NOT_EXIST = 2801
    RET_CHALLENGE_NOT_UNLOCK = 2802
    RET_CHALLENGE_ALREADY = 2803
    RET_CHALLENGE_LINEUP_EDIT_FORBIDDEN = 2804
    RET_CHALLENGE_LINEUP_EMPTY = 2805
    RET_CHALLENGE_NOT_DOING = 2806
    RET_CHALLENGE_NOT_FINISH = 2807
    RET_CHALLENGE_TARGET_NOT_FINISH = 2808
    RET_CHALLENGE_TARGET_REWARD_TAKEN = 2809
    RET_CHALLENGE_TIME_NOT_VALID = 2810
    RET_BASIC_TYPE_ALREADY = 2850
    RET_NO_BASIC_TYPE = 2851
    RET_NOT_CHOOSE_BASIC_TYPE = 2852
    RET_NOT_FUNC_CLOSE = 2853
    RET_ROGUE_STATUS_NOT_MATCH = 2901
    RET_ROGUE_SELECT_BUFF_NOT_EXIST = 2902
    RET_ROGUE_COIN_NOT_ENOUGH = 2903
    RET_ROGUE_STAMINA_NOT_ENOUGH = 2904
    RET_ROGUE_COUNT_INVALID = 2905
    RET_ROGUE_PROP_ALREADY_USED = 2906
    RET_ROGUE_RECORD_ALREADY_SAVED = 2907
    RET_ROGUE_ROLL_BUFF_MAX_COUNT = 2908
    RET_ROGUE_PICK_AVATAR_INVALID = 2909
    RET_ROGUE_QUEST_EXPIRE = 2910
    RET_ROGUE_QUEST_REWARD_ALREADY = 2911
    RET_MISSION_EVENT_CONFIG_NOT_EXIST = 2951
    RET_MISSION_EVENT_NOT_CLIENT = 2952
    RET_MISSION_EVENT_FINISHED = 2953
    RET_MISSION_EVENT_DOING = 2954
    RET_HAS_CHALLENGE_MISSION_EVENT = 2955
    RET_NOT_CHALLENGE_MISSION_EVENT = 2956
    RET_GACHA_ID_NOT_EXIST = 3001
    RET_GACHA_NUM_INVALID = 3002
    RET_GACHA_FIRST_GACHA_MUST_ONE = 3003
    RET_GACHA_REQ_DUPLICATED = 3004
    RET_GACHA_NOT_IN_SCHEDULE = 3005
    RET_GACHA_NEWBIE_CLOSE = 3006
    RET_GACHA_TODAY_LIMITED = 3007
    RET_PRESTIGE_ID_NOT_EXIST = 3051
    RET_PRESTIGE_LEVEL_REWARD_LEVEL_ERROR = 3052
    RET_PRESTIGE_LEVEL_REWARD_HAS_TAKEN = 3053
    RET_PRESTIGE_MISSION_NOT_EXIST = 3054
    RET_PRESTIGE_MISSION_NOT_FINISHED = 3055
    RET_PRESTIGE_MISSION_REWARD_HAS_TAKEN = 3056
    RET_NOT_IN_RAID = 3101
    RET_RAID_DOING = 3102
    RET_NOT_PROP = 3103
    RET_RAID_ID_NOT_MATCH = 3104
    RET_RAID_RESTART_NOT_MATCH = 3105
    RET_RAID_LIMIT = 3106
    RET_RAID_AVATAR_LIST_EMPTY = 3107
    RET_RAID_AVATAR_NOT_EXIST = 3108
    RET_CHALLENGE_RAID_REWARD_ALREADY = 3109
    RET_CHALLENGE_RAID_SCORE_NOT_REACH = 3110
    RET_CHALLENGE_RAID_NOT_OPEN = 3111
    RET_RAID_FINISHED = 3112
    RET_TALK_EVENT_ALREADY_TAKEN = 3151
    RET_NPC_ALREADY_MEET = 3152
    RET_NPC_NOT_IN_CONFIG = 3153
    RET_DIALOGUE_GROUP_DISMATCH = 3154
    RET_DIALOGUE_EVENT_INVALID = 3155
    RET_EXPEDITION_CONFIG_NOT_EXIST = 3201
    RET_EXPEDITION_REWARD_CONFIG_NOT_EXIST = 3202
    RET_EXPEDITION_NOT_UNLOCKED = 3203
    RET_EXPEDITION_ALREADY_ACCEPTED = 3204
    RET_EXPEDITION_REPEATED_AVATAR = 3205
    RET_AVATAR_ALREADY_DISPATCHED = 3206
    RET_EXPEDITION_NOT_ACCEPTED = 3207
    RET_EXPEDITION_NOT_FINISH = 3208
    RET_EXPEDITION_ALREADY_FINISH = 3209
    RET_LOGIN_ACTIVITY_HAS_TAKEN = 3301
    RET_LOGIN_ACTIVITY_DAYS_LACK = 3302
    RET_MESSAGE_CONFIG_NOT_EXIST = 3501
    RET_MESSAGE_SECTION_NOT_TAKE = 3502
    RET_MESSAGE_GROUP_NOT_TAKE = 3503
    RET_MESSAGE_SECTION_ID_NOT_MATCH = 3504
    RET_MESSAGE_SECTION_CAN_NOT_FINISH = 3505
    RET_MESSAGE_ITEM_CAN_NOT_FINISH = 3506


class CmdActivityType(betterproto.Enum):
    CmdActivityTypeNone = 0
    CmdGetLoginActivityCsReq = 2601
    CmdGetLoginActivityScRsp = 2602
    CmdTakeLoginActivityRewardCsReq = 2603
    CmdTakeLoginActivityRewardScRsp = 2604


class CmdAdventureType(betterproto.Enum):
    CmdAdventureTypeNone = 0
    CmdEnterAdventureCsReq = 1301
    CmdEnterAdventureScRsp = 1302


class CmdArchiveType(betterproto.Enum):
    CmdArchiveTypeNone = 0
    CmdGetArchiveDataCsReq = 2301
    CmdGetArchiveDataScRsp = 2302
    CmdGetUpdatedArchiveDataCsReq = 2303
    CmdGetUpdatedArchiveDataScRsp = 2304


class CmdAvatarType(betterproto.Enum):
    CmdAvatarTypeNone = 0
    CmdGetAvatarDataCsReq = 301
    CmdGetAvatarDataScRsp = 302
    CmdAvatarExpUpCsReq = 303
    CmdAvatarExpUpScRsp = 304
    CmdUnlockSkilltreeCsReq = 305
    CmdUnlockSkilltreeScRsp = 306
    CmdPromoteAvatarCsReq = 307
    CmdPromoteAvatarScRsp = 308
    CmdDressAvatarCsReq = 309
    CmdDressAvatarScRsp = 310
    CmdTakeOffEquipmentCsReq = 311
    CmdTakeOffEquipmentScRsp = 312
    CmdAddAvatarScNotify = 313
    CmdRankUpAvatarCsReq = 314
    CmdRankUpAvatarScRsp = 315
    CmdDressRelicAvatarCsReq = 316
    CmdDressRelicAvatarScRsp = 317
    CmdTakeOffRelicCsReq = 318
    CmdTakeOffRelicScRsp = 319


class AddAvatarSrc(betterproto.Enum):
    ADD_AVATAR_SRC_NONE = 0
    ADD_AVATAR_SRC_GACHA = 1


class CmdBattleType(betterproto.Enum):
    CmdBattleTypeNone = 0
    CmdPVEBattleResultCsReq = 101
    CmdPVEBattleResultScRsp = 102
    CmdQuitBattleCsReq = 103
    CmdQuitBattleScRsp = 104
    CmdGetCurBattleInfoCsReq = 105
    CmdGetCurBattleInfoScRsp = 106
    CmdSyncClientResVersionCsReq = 107
    CmdSyncClientResVersionScRsp = 108
    CmdQuitBattleScNotify = 109


class CmdChallengeType(betterproto.Enum):
    CmdChallengeTypeNone = 0
    CmdGetChallengeCsReq = 1701
    CmdGetChallengeScRsp = 1702
    CmdStartChallengeCsReq = 1703
    CmdStartChallengeScRsp = 1704
    CmdLeaveChallengeCsReq = 1705
    CmdLeaveChallengeScRsp = 1706
    CmdChallengeSettleNotify = 1707
    CmdFinishChallengeCsReq = 1708
    CmdFinishChallengeScRsp = 1709
    CmdGetCurChallengeCsReq = 1710
    CmdGetCurChallengeScRsp = 1711
    CmdChallengeLineupNotify = 1712
    CmdTakeChallengeTargetRewardCsReq = 1713
    CmdTakeChallengeTargetRewardScRsp = 1714


class ChallengeStatus(betterproto.Enum):
    CHALLENGE_UNKNOWN = 0
    CHALLENGE_DOING = 1
    CHALLENGE_FINISH = 2
    CHALLENGE_FAILED = 3


class MissionStatus(betterproto.Enum):
    MISSION_NONE = 0
    MISSION_DOING = 1
    MISSION_FINISH = 2
    MISSION_PREPARED = 3


class MessageSectionStatus(betterproto.Enum):
    MESSAGE_SECTION_NONE = 0
    MESSAGE_SECTION_DOING = 1
    MESSAGE_SECTION_FINISH = 2


class MessageGroupStatus(betterproto.Enum):
    MESSAGE_GROUP_NONE = 0
    MESSAGE_GROUP_DOING = 1
    MESSAGE_GROUP_FINISH = 2


class CmdDialogueType(betterproto.Enum):
    CmdDialogueTypeNone = 0
    CmdGetDialogueEventDataCsReq = 2401
    CmdGetDialogueEventDataScRsp = 2402
    CmdSelectDialogueEventCsReq = 2403
    CmdSelectDialogueEventScRsp = 2404
    CmdSyncDialogueEventDataScNotify = 2405


class CmdExpeditionType(betterproto.Enum):
    CmdExpeditionTypeNone = 0
    CmdGetExpeditionDataCsReq = 2501
    CmdGetExpeditionDataScRsp = 2502
    CmdAcceptExpeditionCsReq = 2503
    CmdAcceptExpeditionScRsp = 2504
    CmdCancelExpeditionCsReq = 2505
    CmdCancelExpeditionScRsp = 2506
    CmdTakeExpeditionRewardCsReq = 2507
    CmdTakeExpeditionRewardScRsp = 2508


class CmdGachaType(betterproto.Enum):
    CmdGachaTypeNone = 0
    CmdGetGachaInfoCsReq = 1901
    CmdGetGachaInfoScRsp = 1902
    CmdDoGachaCsReq = 1903
    CmdDoGachaScRsp = 1904


class CmdItemType(betterproto.Enum):
    CmdItemTypeNone = 0
    CmdGetBagCsReq = 501
    CmdGetBagScRsp = 502
    CmdPromoteEquipmentCsReq = 503
    CmdPromoteEquipmentScRsp = 504
    CmdLockEquipmentCsReq = 505
    CmdLockEquipmentScRsp = 506
    CmdUseItemCsReq = 507
    CmdUseItemScRsp = 508
    CmdRankUpEquipmentCsReq = 509
    CmdRankUpEquipmentScRsp = 510
    CmdExpUpEquipmentCsReq = 511
    CmdExpUpEquipmentScRsp = 512
    CmdComposeItemCsReq = 513
    CmdComposeItemScRsp = 514
    CmdExpUpRelicCsReq = 515
    CmdExpUpRelicScRsp = 516
    CmdLockRelicCsReq = 517
    CmdLockRelicScRsp = 518
    CmdSellItemCsReq = 519
    CmdSellItemScRsp = 520
    CmdRechargeSuccNotify = 521


class CmdLineupType(betterproto.Enum):
    CmdLineupTypeNone = 0
    CmdGetStageLineupCsReq = 701
    CmdGetStageLineupScRsp = 702
    CmdGetCurLineupDataCsReq = 703
    CmdGetCurLineupDataScRsp = 704
    CmdJoinLineupCsReq = 705
    CmdJoinLineupScRsp = 706
    CmdQuitLineupCsReq = 707
    CmdQuitLineupScRsp = 708
    CmdSwapLineupCsReq = 709
    CmdSwapLineupScRsp = 710
    CmdSyncLineupNotify = 711
    CmdGetLineupAvatarDataCsReq = 712
    CmdGetLineupAvatarDataScRsp = 713
    CmdChangeLineupLeaderCsReq = 714
    CmdChangeLineupLeaderScRsp = 715
    CmdSwitchLineupIndexCsReq = 716
    CmdSwitchLineupIndexScRsp = 717
    CmdSetLineupNameCsReq = 718
    CmdSetLineupNameScRsp = 719
    CmdGetAllLineupDataCsReq = 720
    CmdGetAllLineupDataScRsp = 721
    CmdVirtualLineupDestroyNotify = 722


class ExtraLineupType(betterproto.Enum):
    LINEUP_NONE = 0
    LINEUP_CHALLENGE = 1
    LINEUP_ROGUE = 2
    LINEUP_CHALLENGE_2 = 3
    LINEUP_CHALLENGE_3 = 4
    LINEUP_ROGUE_CHALLENGE = 5


class SyncLineupReason(betterproto.Enum):
    SYNC_REASON_NONE = 0
    SYNC_REASON_MP_ADD = 1
    SYNC_REASON_HP_ADD = 2


class CmdMailType(betterproto.Enum):
    CmdMailTypeNone = 0
    CmdGetMailCsReq = 801
    CmdGetMailScRsp = 802
    CmdMarkReadMailCsReq = 803
    CmdMarkReadMailScRsp = 804
    CmdDelMailCsReq = 805
    CmdDelMailScRsp = 806
    CmdTakeMailAttachmentCsReq = 807
    CmdTakeMailAttachmentScRsp = 808
    CmdNewMailScNotify = 809


class CmdMazeType(betterproto.Enum):
    CmdMazeTypeNode = 0
    CmdGetMazeCsReq = 1001
    CmdGetMazeScRsp = 1002
    CmdChooseMazeSeriesCsReq = 1003
    CmdChooseMazeSeriesScRsp = 1004
    CmdChooseMazeAbilityCsReq = 1005
    CmdChooseMazeAbilityScRsp = 1006
    CmdEnterMazeCsReq = 1007
    CmdEnterMazeScRsp = 1008
    CmdMazeBuffScNotify = 1011
    CmdCastMazeSkillCsReq = 1012
    CmdCastMazeSkillScRsp = 1013
    CmdMazePlaneEventScNotify = 1014
    CmdEnterMazeByServerScNotify = 1015
    CmdGetMazeMapInfoCsReq = 1016
    CmdGetMazeMapInfoScRsp = 1017
    CmdGetMazeTimeOfDayCsReq = 1018
    CmdGetMazeTimeOfDayScRsp = 1019
    CmdSetMazeTimeOfDayCsReq = 1020
    CmdSetMazeTimeOfDayScRsp = 1021
    CmdDelMazeTimeOfDayCsReq = 1022
    CmdDelMazeTimeOfDayScRsp = 1023
    CmdReturnStartAnchorCsReq = 1024
    CmdReturnStartAnchorScRsp = 1025


class MazeBuffOp(betterproto.Enum):
    MAZE_BUFF_OP_NONE = 0
    MAZE_BUFF_OP_ADD = 1
    MAZE_BUFF_OP_DEL = 2


class EnterMazeReason(betterproto.Enum):
    REASON_NONE = 0
    REASON_CHALLENGE_TIMEOUT = 1
    REASON_ROGUE_TIMEOUT = 2


class CmdMessageType(betterproto.Enum):
    CmdMessageTypeNone = 0
    CmdGetNpcMessageGroupCsReq = 2701
    CmdGetNpcMessageGroupScRsp = 2702
    CmdGetNpcStatusCsReq = 2703
    CmdGetNpcStatusScRsp = 2704
    CmdFinishItemIdCsReq = 2705
    CmdFinishItemIdScRsp = 2706
    CmdFinishSectionIdCsReq = 2707
    CmdFinishSectionIdScRsp = 2708


class CmdMissionType(betterproto.Enum):
    CmdMissionTypeNone = 0
    CmdGetMissionDataCsReq = 1201
    CmdGetMissionDataScRsp = 1202
    CmdFinishTalkMissionCsReq = 1203
    CmdFinishTalkMissionScRsp = 1204
    CmdMissionRewardScNotify = 1205
    CmdSyncTaskCsReq = 1206
    CmdSyncTaskScRsp = 1207
    CmdDailyTaskDataScNotify = 1208
    CmdTakeDailyTaskExtraRewardCsReq = 1209
    CmdTakeDailyTaskExtraRewardScRsp = 1210
    CmdDailyTaskRewardScNotify = 1211
    CmdMissionGroupWarnScNotify = 1212
    CmdFinishCosumeItemMissionCsReq = 1213
    CmdFinishCosumeItemMissionScRsp = 1214
    CmdGetMissionEventDataCsReq = 1215
    CmdGetMissionEventDataScRsp = 1216
    CmdMissionEventRewardScNotify = 1217
    CmdAcceptMissionEventCsReq = 1218
    CmdAcceptMissionEventScRsp = 1219
    CmdGetMissionStatusCsReq = 1220
    CmdGetMissionStatusScRsp = 1221
    CmdInterruptMissionEventCsReq = 1222
    CmdInterruptMissionEventScRsp = 1223
    CmdSetMissionEventProgressCsReq = 1224
    CmdSetMissionEventProgressScRsp = 1225
    CmdSubMissionRewardScNotify = 1226


class CmdPlayerType(betterproto.Enum):
    CmdPlayerTypeNone = 0
    CmdPlayerLoginCsReq = 1
    CmdPlayerLoginScRsp = 2
    CmdPlayerLogoutCsReq = 3
    CmdPlayerLogoutScRsp = 4
    CmdPlayerGetTokenCsReq = 5
    CmdPlayerGetTokenScRsp = 6
    CmdPlayerKeepAliveNotify = 7
    CmdGmTalkScNotify = 8
    CmdPlayerKickOutScNotify = 9
    CmdGmTalkCsReq = 10
    CmdGmTalkScRsp = 11
    CmdExchangeStaminaCsReq = 14
    CmdExchangeStaminaScRsp = 15
    CmdGetAuthkeyCsReq = 16
    CmdGetAuthkeyScRsp = 17
    CmdRegionStopScNotify = 18
    CmdAntiAddictScNotify = 19
    CmdSetNicknameCsReq = 20
    CmdSetNicknameScRsp = 21
    CmdGetLevelRewardTakenListCsReq = 22
    CmdGetLevelRewardTakenListScRsp = 23
    CmdGetLevelRewardCsReq = 24
    CmdGetLevelRewardScRsp = 25
    CmdSyncTimeCsReq = 26
    CmdSyncTimeScRsp = 27
    CmdSetLanguageCsReq = 28
    CmdSetLanguageScRsp = 29
    CmdServerAnnounceNotify = 30
    CmdSetHeroBasicTypeCsReq = 31
    CmdSetHeroBasicTypeScRsp = 32
    CmdGetHeroBasicTypeInfoCsReq = 33
    CmdGetHeroBasicTypeInfoScRsp = 34
    CmdGetHeroPathCsReq = 35
    CmdGetHeroPathScRsp = 36
    CmdHeroPathChangedNotify = 37
    CmdSetGenderCsReq = 38
    CmdSetGenderScRsp = 39
    CmdSetPlayerInfoCsReq = 40
    CmdSetPlayerInfoScRsp = 41
    CmdHeroBasicTypeChangedNotify = 42
    CmdQueryProductInfoCsReq = 43
    CmdQueryProductInfoScRsp = 44
    CmdClientDownloadDataScNotify = 45
    CmdUpdateFeatureSwitchScNotify = 46
    CmdGetBasicInfoCsReq = 47
    CmdGetBasicInfoScRsp = 48
    CmdDailyRefreshNotify = 49


class AuthkeySignType(betterproto.Enum):
    AUTHKEY_SIGN_TYPE_NONE = 0
    AUTHKEY_SIGN_TYPE_DEFAULT = 1
    AUTHKEY_SIGN_TYPE_RSA = 2


class CmdPlotType(betterproto.Enum):
    CmdPlotTypeNone = 0
    CmdFinishPlotCsReq = 1101
    CmdFinishPlotScRsp = 1102


class CmdPrestigeType(betterproto.Enum):
    CmdPrestigeTypeNone = 0
    CmdGetPrestigeInfoCsReq = 2001
    CmdGetPrestigeInfoScRsp = 2002
    CmdPrestigeInfoChangeNotify = 2003
    CmdTakePrestigeLevelRewardCsReq = 2004
    CmdTakePrestigeLevelRewardScRsp = 2005


class CmdQuestType(betterproto.Enum):
    CmdQuestTypeNone = 0
    CmdGetQuestDataCsReq = 901
    CmdGetQuestDataScRsp = 902
    CmdTakeQuestRewardCsReq = 903
    CmdTakeQuestRewardScRsp = 904
    CmdTakeAchievementLevelRewardCsReq = 905
    CmdTakeAchievementLevelRewardScRsp = 906


class QuestStatus(betterproto.Enum):
    QUEST_NONE = 0
    QUEST_DOING = 1
    QUEST_FINISH = 2
    QUEST_CLOSE = 3
    QUEST_DELETE = 4


class CmdRaidType(betterproto.Enum):
    CmdRaidTypeNone = 0
    CmdStartRaidCsReq = 2201
    CmdStartRaidScRsp = 2202
    CmdLeaveRaidCsReq = 2203
    CmdLeaveRaidScRsp = 2204
    CmdRaidInfoNotify = 2205
    CmdGetChallengeRaidInfoCsReq = 2206
    CmdGetChallengeRaidInfoScRsp = 2207
    CmdTakeChallengeRaidRewardCsReq = 2208
    CmdTakeChallengeRaidRewardScRsp = 2209
    CmdChallengeRaidNotify = 2210


class RaidStatus(betterproto.Enum):
    RAID_STATUS_NONE = 0
    RAID_STATUS_DOING = 1
    RAID_STATUS_FINISH = 2
    RAID_STATUS_FAILED = 3


class CmdRogueType(betterproto.Enum):
    CmdRogueTypeNone = 0
    CmdGetRogueInfoCsReq = 1801
    CmdGetRogueInfoScRsp = 1802
    CmdStartRogueCsReq = 1803
    CmdStartRogueScRsp = 1804
    CmdEnterRogueCsReq = 1805
    CmdEnterRogueScRsp = 1806
    CmdLeaveRogueCsReq = 1807
    CmdLeaveRogueScRsp = 1808
    CmdSyncRogueBuffSelectInfoScNotify = 1809
    CmdSelectRogueBuffCsReq = 1810
    CmdSelectRogueBuffScRsp = 1811
    CmdRollRogueBuffCsReq = 1812
    CmdRollRogueBuffScRsp = 1813
    CmdEnterNextRogueRoomScNotify = 1814
    CmdSyncRogueFinishScNotify = 1815
    CmdPickRogueAvatarCsReq = 1816
    CmdPickRogueAvatarScRsp = 1817
    CmdAddRogueBuffScNotify = 1818
    CmdReviveRogueAvatarCsReq = 1819
    CmdReviveRogueAvatarScRsp = 1820
    CmdSaveRogueRecordCsReq = 1821
    CmdSaveRogueRecordScRsp = 1822
    CmdRecoverRogueStaminaCsReq = 1823
    CmdRecoverRogueStaminaScRsp = 1824
    CmdStartRogueChallengeCsReq = 1827
    CmdStartRogueChallengeScRsp = 1828
    CmdLeaveRogueChallengeCsReq = 1829
    CmdLeaveRogueChallengeScRsp = 1830
    CmdSyncRogueChallengeFinishScNotify = 1831
    CmdQuitRogueCsReq = 1832
    CmdQuitRogueScRsp = 1833
    CmdAppraisalRogueStoneCsReq = 1834
    CmdAppraisalRogueStoneScRsp = 1835
    CmdSyncRogueSeasonFinishScNotify = 1836
    CmdSyncRogueInfoChangeScNotify = 1837
    CmdAddRogueExtraBuffScNotify = 1838
    CmdEnterRogueMapRoomCsReq = 1839
    CmdEnterRogueMapRoomScRsp = 1840
    CmdEnterRogueNextLevelCsReq = 1841
    CmdEnterRogueNextLevelScRsp = 1842
    CmdSyncRogueMapRoomScNotify = 1843
    CmdSyncRoguePickAvatarScNotify = 1844
    CmdSetRogueBlessCsReq = 1845
    CmdSetRogueBlessScRsp = 1846
    CmdSyncRogueBlessScNotify = 1847
    CmdGetRogueShopInfoCsReq = 1848
    CmdGetRogueShopInfoScRsp = 1849
    CmdBuyRogueShopBuffCsReq = 1850
    CmdBuyRogueShopBuffScRsp = 1851
    CmdFinishRogueDialogueGroupCsReq = 1852
    CmdFinishRogueDialogueGroupScRsp = 1853
    CmdUnlockRogueRoomCsReq = 1856
    CmdUnlockRogueRoomScRsp = 1857
    CmdGetRogueGachaInfoCsReq = 1858
    CmdGetRogueGachaInfoScRsp = 1859
    CmdSetRogueGachaWishListCsReq = 1860
    CmdSetRogueGachaWishListScRsp = 1861
    CmdDoRogueGachaCsReq = 1862
    CmdDoRogueGachaScRsp = 1863
    CmdSyncRogueGachaRefreshScNotify = 1864
    CmdBuyRogueShopItemCsReq = 1865
    CmdBuyRogueShopItemScRsp = 1866
    CmdGetRogueAppraisalItemInfoCsReq = 1867
    CmdGetRogueAppraisalItemInfoScRsp = 1868
    CmdSyncRogueMiracleGetItemScNotify = 1869
    CmdSyncRogueQuestScNotify = 1870
    CmdGetRogueQuestRewardCsReq = 1871
    CmdGetRogueQuestRewardScRsp = 1872


class RogueStatus(betterproto.Enum):
    ROGUE_STATUS_NONE = 0
    ROGUE_STATUS_DOING = 1
    ROGUE_STATUS_PENDING = 2
    ROGUE_STATUS_FINISH = 3


class RogueRoomStatus(betterproto.Enum):
    ROGUE_ROOM_STATUS_NONE = 0
    ROGUE_ROOM_STATUS_LOCK = 1
    ROGUE_ROOM_STATUS_UNLOCK = 2
    ROGUE_ROOM_STATUS_PLAY = 3
    ROGUE_ROOM_STATUS_FINISH = 4


class RogueStoneAppraisalResult(betterproto.Enum):
    ROGUE_STONE_APPRAISAL_NONE = 0
    ROGUE_STONE_APPRAISAL_FAILED = 1
    ROGUE_STONE_APPRAISAL_NORMAL = 2
    ROGUE_STONE_APPRAISAL_PERFECT = 3


class RogueDialogStatus(betterproto.Enum):
    ROGUE_DIALOG_STATUS_NONE = 0
    ROGUE_DIALOG_STATUS_LOCK = 1
    ROGUE_DIALOG_STATUS_UNLOCK = 2


class RogueGachaGoodsStatus(betterproto.Enum):
    ROGUE_GACHA_GOODS_DEFAULT = 0
    ROGUE_GACHA_GOODS_UP = 1
    ROGUE_GACHA_GOODS_EMPTY = 2


class RogueQuestStatus(betterproto.Enum):
    ROGUE_QUEST_STATUS_NONE = 0
    ROGUE_QUEST_STATUS_DOING = 1
    ROGUE_QUEST_STATUS_REWARD = 2
    ROGUE_QUEST_STATUS_FINISH = 3


class RogueQuestType(betterproto.Enum):
    ROGUE_QUEST_TYPE_EXPLORE = 0
    ROGUE_QUEST_TYPE_CHALLENGE = 1


class CmdSceneType(betterproto.Enum):
    CmdSceneTypeNone = 0
    CmdSceneEntityMoveCsReq = 1401
    CmdSceneEntityMoveScRsp = 1402
    CmdInteractPropCsReq = 1403
    CmdInteractPropScRsp = 1404
    CmdSceneCastSkillCsReq = 1405
    CmdSceneCastSkillScRsp = 1406
    CmdGetCurSceneInfoCsReq = 1407
    CmdGetCurSceneInfoScRsp = 1408
    CmdSceneEntityUpdateScNotify = 1409
    CmdSceneEntityDisappearScNotify = 1410
    CmdSceneEntityMoveScNotify = 1411
    CmdSpringTransferCsReq = 1414
    CmdSpringTransferScRsp = 1415
    CmdUpdateBuffScNotify = 1416
    CmdDelBuffScNotify = 1417
    CmdSpringRefreshCsReq = 1418
    CmdSpringRefreshScRsp = 1419
    CmdLastSpringRefreshTimeNotify = 1420
    CmdReturnLastTownCsReq = 1421
    CmdReturnLastTownScRsp = 1422
    CmdSceneEnterStageCsReq = 1423
    CmdSceneEnterStageScRsp = 1424
    CmdEnterSectionCsReq = 1427
    CmdEnterSectionScRsp = 1428
    CmdSetCurInteractEntityCsReq = 1431
    CmdSetCurInteractEntityScRsp = 1432
    CmdRecoverAllLineupCsReq = 1433
    CmdRecoverAllLineupScRsp = 1434
    CmdSavePointsInfoNotify = 1435
    CmdStartCocoonStageCsReq = 1436
    CmdStartCocoonStageScRsp = 1437
    CmdEntityBindPropCsReq = 1438
    CmdEntityBindPropScRsp = 1439
    CmdSetClientPausedCsReq = 1440
    CmdSetClientPausedScRsp = 1441
    CmdUpdateBuffGroupStartScNotify = 1442
    CmdUpdateBuffGroupEndScNotify = 1443
    CmdActivateFarmElementCsReq = 1445
    CmdActivateFarmElementScRsp = 1446
    CmdGetSpringRecoverDataCsReq = 1447
    CmdGetSpringRecoverDataScRsp = 1448
    CmdSetSpringRecoverConfigCsReq = 1449
    CmdSetSpringRecoverConfigScRsp = 1450
    CmdSpringRecoverCsReq = 1451
    CmdSpringRecoverScRsp = 1452
    CmdHealPoolInfoNotify = 1453
    CmdSpringRecoverSingleAvatarCsReq = 1454
    CmdSpringRecoverSingleAvatarScRsp = 1455


class CmdShopType(betterproto.Enum):
    CmdShopTypeNone = 0
    CmdGetShopListCsReq = 1501
    CmdGetShopListScRsp = 1502
    CmdBuyGoodsCsReq = 1503
    CmdBuyGoodsScRsp = 1504


class CmdStageType(betterproto.Enum):
    CmdStageTypeNone = 0
    CmdGetStageDataCsReq = 201
    CmdGetStageDataScRsp = 202
    CmdStageBeginCsReq = 203
    CmdStageBeginScRsp = 204


class CmdPlayerSyncType(betterproto.Enum):
    CmdPlayerSyncNone = 0
    CmdPlayerSyncScNotify = 601


class CmdTalkEventType(betterproto.Enum):
    CmdTalkRewardTypeNone = 0
    CmdGetNpcTakenRewardCsReq = 2101
    CmdGetNpcTakenRewardScRsp = 2102
    CmdTakeTalkRewardCsReq = 2103
    CmdTakeTalkRewardScRsp = 2104
    CmdGetFirstTalkNpcCsReq = 2105
    CmdGetFirstTalkNpcScRsp = 2106
    CmdFinishFirstTalkNpcCsReq = 2107
    CmdFinishFirstTalkNpcScRsp = 2108


class CmdTutorialType(betterproto.Enum):
    CmdTutorialTypeNone = 0
    CmdGetTutorialCsReq = 1601
    CmdGetTutorialScRsp = 1602
    CmdGetTutorialGuideCsReq = 1603
    CmdGetTutorialGuideScRsp = 1604
    CmdUnlockTutorialCsReq = 1605
    CmdUnlockTutorialScRsp = 1606
    CmdUnlockTutorialGuideCsReq = 1607
    CmdUnlockTutorialGuideScRsp = 1608
    CmdFinishTutorialCsReq = 1609
    CmdFinishTutorialScRsp = 1610
    CmdFinishTutorialGuideCsReq = 1611
    CmdFinishTutorialGuideScRsp = 1612


class TutorialStatus(betterproto.Enum):
    TUTORIAL_NONE = 0
    TUTORIAL_UNLOCK = 1
    TUTORIAL_FINISH = 2


class CmdWaypointType(betterproto.Enum):
    CmdWaypointTypeNone = 0
    CmdGetWaypointCsReq = 401
    CmdGetWaypointScRsp = 402
    CmdSetCurWaypointCsReq = 403
    CmdSetCurWaypointScRsp = 404
    CmdGetChapterCsReq = 405
    CmdGetChapterScRsp = 406
    CmdWaypointShowNewCsNotify = 407
    CmdTakeChapterRewardCsReq = 408
    CmdTakeChapterRewardScRsp = 409


class WaypointType(betterproto.Enum):
    WAYPOINT_TYPE_NONE = 0
    WAYPOINT_TYPE_STAGE = 1
    WAYPOINT_TYPE_PLOT = 2


class WaypointUnlockType(betterproto.Enum):
    WAYPOINT_UNLOCK_NONE = 0
    WAYPOINT_UNLOCK_PRE = 1
    WAYPOINT_UNLOCK_LEVEL = 2


class DispatchType(betterproto.Enum):
    DISPATCH_TYPE_NONE = 0
    DISPATCH_TYPE_BY_ADDR = 1
    DISPATCH_TYPE_BY_MOD = 2
    DISPATCH_TYPE_BY_RAND = 3
    DISPATCH_TYPE_BY_CHASH = 4
    DISPATCH_TYPE_BY_STICKY_SESSION = 5
    DISPATCH_TYPE_BY_OBJECT = 6


class PlayerKickOutScNotifyKickType(betterproto.Enum):
    KICK_SQUEEZED = 0
    KICK_BLACK = 1
    KICK_CHANGE_PWD = 2


@dataclass(eq=False, repr=False)
class PlayerBasicInfo(betterproto.Message):
    nickname: str = betterproto.string_field(1)
    level: int = betterproto.uint32_field(2)
    exp: int = betterproto.uint32_field(3)
    stamina: int = betterproto.uint32_field(4)
    mcoin: int = betterproto.uint32_field(5)
    hcoin: int = betterproto.uint32_field(6)
    scoin: int = betterproto.uint32_field(7)
    world_level: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class BlackInfo(betterproto.Message):
    begin_time: int = betterproto.uint32_field(1)
    end_time: int = betterproto.uint32_field(2)
    limit_level: int = betterproto.uint32_field(3)
    ban_type: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class VersionCount(betterproto.Message):
    version: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ClientDownloadData(betterproto.Message):
    version: int = betterproto.uint32_field(1)
    time: int = betterproto.uint32_field(2)
    data: bytes = betterproto.bytes_field(3)


@dataclass(eq=False, repr=False)
class ClientUploadData(betterproto.Message):
    tag: str = betterproto.string_field(1)
    value: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class FeatureSwitchParam(betterproto.Message):
    param_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class FeatureSwitchInfo(betterproto.Message):
    type: "FeatureSwitchType" = betterproto.enum_field(1)
    switch_list: List["FeatureSwitchParam"] = betterproto.message_field(2)
    is_all_closed: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class BattleOp(betterproto.Message):
    turn_counter: int = betterproto.uint32_field(1)
    state: int = betterproto.uint32_field(2)
    action_entity_id: int = betterproto.uint32_field(3)
    target_entity_id: int = betterproto.uint32_field(4)
    op_type: int = betterproto.uint32_field(5)
    skill_index: int = betterproto.uint32_field(6)
    operation_counter: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class BattleEquipment(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)
    promotion: int = betterproto.uint32_field(3)
    rank: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class BattleRelic(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)
    main_affix_id: int = betterproto.uint32_field(3)
    sub_affix_list: List["RelicAffix"] = betterproto.message_field(4)
    unique_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class AvatarSkillTree(betterproto.Message):
    point_id: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class RelicAffix(betterproto.Message):
    affix_id: int = betterproto.uint32_field(1)
    cnt: int = betterproto.uint32_field(2)
    step: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class BattleAvatar(betterproto.Message):
    avatar_type: "AvatarType" = betterproto.enum_field(1)
    id: int = betterproto.uint32_field(2)
    level: int = betterproto.uint32_field(3)
    rank: int = betterproto.uint32_field(4)
    index: int = betterproto.uint32_field(5)
    skilltree_list: List["AvatarSkillTree"] = betterproto.message_field(6)
    equipment_list: List["BattleEquipment"] = betterproto.message_field(7)
    hp: int = betterproto.uint32_field(8)
    sp: int = betterproto.uint32_field(9)
    promotion: int = betterproto.uint32_field(10)
    relic_list: List["BattleRelic"] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class BattleMonsterWave(betterproto.Message):
    monster_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class BattleBuff(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)
    owner_index: int = betterproto.uint32_field(3)
    wave_flag: int = betterproto.uint32_field(4)
    target_index_list: List[int] = betterproto.uint32_field(5)
    dynamic_values: Dict[str, float] = betterproto.map_field(
        6, betterproto.TYPE_STRING, betterproto.TYPE_FLOAT
    )


@dataclass(eq=False, repr=False)
class BattleLineup(betterproto.Message):
    avatar_list: List["BattleAvatar"] = betterproto.message_field(1)
    monster_wave_list: List["BattleMonsterWave"] = betterproto.message_field(2)
    buff_list: List["BattleBuff"] = betterproto.message_field(3)
    hero_path_list: List["HeroPath"] = betterproto.message_field(4)
    battle_scoring_list: List[int] = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ClientTurnSnapshot(betterproto.Message):
    turn_counter: int = betterproto.uint32_field(1)
    random_counter: int = betterproto.uint32_field(2)
    anim_event_counter: int = betterproto.uint32_field(3)
    snapshot_list: List["CharacterSnapshot"] = betterproto.message_field(4)
    anim_event_list: List["AnimEventSnapshot"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class GamecoreConfig(betterproto.Message):
    is_skip_verify: bool = betterproto.bool_field(1)
    max_turn_cnt: int = betterproto.uint32_field(2)
    is_auto_fight: bool = betterproto.bool_field(3)
    csv_path: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class BattleBuffMsg(betterproto.Message):
    buff_id_list: List[int] = betterproto.uint32_field(1)
    buff_index_list: List[int] = betterproto.uint32_field(2)
    buff_level_list: List[int] = betterproto.uint32_field(3)
    buff_flag_list: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class BattleReplay(betterproto.Message):
    version: int = betterproto.uint32_field(1)
    logic_random_seed: int = betterproto.uint32_field(2)
    stage_id: int = betterproto.uint32_field(3)
    lineup: "BattleLineup" = betterproto.message_field(4)
    op_list: List["BattleOp"] = betterproto.message_field(5)
    turn_snapshot_hash: bytes = betterproto.bytes_field(6)
    maze_plane_id: int = betterproto.uint32_field(7)
    extra_ability_list: List[int] = betterproto.uint32_field(8)
    is_ai_consider_ultra_skill: bool = betterproto.bool_field(9)
    check_strategy: "BattleCheckStrategyType" = betterproto.enum_field(10)
    battle_module_type: "BattleModuleType" = betterproto.enum_field(11)
    turn_snapshot_list: List["ClientTurnSnapshot"] = betterproto.message_field(21)
    local_level_path: str = betterproto.string_field(22)
    debug_extra_info: str = betterproto.string_field(23)
    config: "GamecoreConfig" = betterproto.message_field(24)
    game_core_log_encode: bytes = betterproto.bytes_field(26)
    rounds_limit: int = betterproto.uint32_field(27)
    log_string_hash: List["BattleReplayStringHash"] = betterproto.message_field(28)
    plane_id: int = betterproto.uint32_field(29)
    floor_id: int = betterproto.uint32_field(30)
    battle_area_group_id: int = betterproto.uint32_field(31)
    battle_area_id: int = betterproto.uint32_field(32)


@dataclass(eq=False, repr=False)
class BattleReplayStringHash(betterproto.Message):
    hash: int = betterproto.int32_field(1)
    value: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class AvatarProperty(betterproto.Message):
    max_hp: float = betterproto.double_field(1)
    attack: float = betterproto.double_field(2)
    defence: float = betterproto.double_field(3)
    speed: float = betterproto.double_field(4)
    left_hp: float = betterproto.double_field(5)
    left_sp: float = betterproto.double_field(6)
    max_sp: float = betterproto.double_field(7)


@dataclass(eq=False, repr=False)
class EquipmentProperty(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    rank: int = betterproto.uint32_field(2)
    promotion: int = betterproto.uint32_field(3)
    level: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class AttackDamageProperty(betterproto.Message):
    attack_type: str = betterproto.string_field(1)
    damage: float = betterproto.double_field(2)


@dataclass(eq=False, repr=False)
class SkillUseProperty(betterproto.Message):
    skill_id: int = betterproto.uint32_field(1)
    skill_type: str = betterproto.string_field(2)
    skill_level: int = betterproto.uint32_field(3)
    skill_use_count: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class SpAddSource(betterproto.Message):
    source: str = betterproto.string_field(1)
    sp_add: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AvatarBattleInfo(betterproto.Message):
    avatar_type: "AvatarType" = betterproto.enum_field(1)
    id: int = betterproto.uint32_field(2)
    avatar_level: int = betterproto.uint32_field(3)
    avatar_rank: int = betterproto.uint32_field(4)
    avatar_promotion: int = betterproto.uint32_field(5)
    avatar_status: "AvatarProperty" = betterproto.message_field(6)
    avatar_skill: List["AvatarSkillTree"] = betterproto.message_field(7)
    avatar_equipment: List["EquipmentProperty"] = betterproto.message_field(8)
    total_turns: int = betterproto.uint32_field(9)
    total_damage: float = betterproto.double_field(10)
    total_heal: float = betterproto.double_field(11)
    total_damage_taken: float = betterproto.double_field(12)
    total_hp_recover: float = betterproto.double_field(13)
    total_sp_cost: float = betterproto.double_field(14)
    stage_id: int = betterproto.uint32_field(15)
    stage_type: int = betterproto.uint32_field(16)
    total_break_damage: float = betterproto.double_field(17)
    attack_type_damage: List["AttackDamageProperty"] = betterproto.message_field(18)
    attack_type_break_damage: List["AttackDamageProperty"] = betterproto.message_field(
        19
    )
    attack_type_max_damage: List["AttackDamageProperty"] = betterproto.message_field(20)
    skill_times: List["SkillUseProperty"] = betterproto.message_field(21)
    delay_cumulate: float = betterproto.double_field(22)
    total_sp_add: int = betterproto.uint32_field(23)
    sp_add_source: List["SpAddSource"] = betterproto.message_field(24)
    total_bp_cost: int = betterproto.uint32_field(25)
    die_times: int = betterproto.uint32_field(26)
    revive_times: int = betterproto.uint32_field(27)
    break_times: int = betterproto.uint32_field(28)
    extra_turns: int = betterproto.uint32_field(29)
    total_shield: float = betterproto.double_field(30)
    total_shield_taken: float = betterproto.double_field(31)
    total_shield_damage: float = betterproto.double_field(32)
    initial_status: "AvatarProperty" = betterproto.message_field(33)
    relics: List["BattleRelic"] = betterproto.message_field(34)


@dataclass(eq=False, repr=False)
class MonsterProperty(betterproto.Message):
    max_hp: float = betterproto.double_field(1)
    attack: float = betterproto.double_field(2)
    defence: float = betterproto.double_field(3)
    shield: float = betterproto.double_field(4)
    speed: float = betterproto.double_field(5)
    left_hp: float = betterproto.double_field(6)


@dataclass(eq=False, repr=False)
class MonsterBattleInfo(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    monster_id: int = betterproto.uint32_field(2)
    monster_template_id: int = betterproto.uint32_field(3)
    monster_level: int = betterproto.uint32_field(4)
    monster_status: "MonsterProperty" = betterproto.message_field(5)
    total_turns: int = betterproto.uint32_field(6)
    total_damage: float = betterproto.double_field(7)
    total_heal: float = betterproto.double_field(8)
    total_damage_taken: float = betterproto.double_field(9)
    total_stance_damage_taken: float = betterproto.double_field(10)
    total_hp_recover: float = betterproto.double_field(11)
    stage_id: int = betterproto.uint32_field(12)
    battle_id: int = betterproto.uint32_field(13)
    monster_type: int = betterproto.uint32_field(14)
    attack_type_damage: List["AttackDamageProperty"] = betterproto.message_field(15)
    skill_times: List["SkillUseProperty"] = betterproto.message_field(16)
    stage_type: int = betterproto.uint32_field(17)
    total_break_damage_taken: float = betterproto.double_field(18)
    delay_cumulate: float = betterproto.double_field(19)
    death_source: "DeathSource" = betterproto.enum_field(20)
    wave: int = betterproto.uint32_field(21)
    index_in_wave: int = betterproto.int32_field(22)
    phase: int = betterproto.uint32_field(23)
    max_phase: int = betterproto.uint32_field(24)
    battle_tag: "BattleTag" = betterproto.enum_field(25)


@dataclass(eq=False, repr=False)
class BattleStatistics(betterproto.Message):
    total_battle_turns: int = betterproto.uint32_field(1)
    total_auto_turns: int = betterproto.uint32_field(2)
    avatar_id_list: List[int] = betterproto.uint32_field(3)
    ultra_cnt: int = betterproto.uint32_field(4)
    total_delay_cumulate: float = betterproto.double_field(5)
    cost_time: float = betterproto.double_field(6)
    avatar_battle_list: List["AvatarBattleInfo"] = betterproto.message_field(7)
    monster_battle_list: List["MonsterBattleInfo"] = betterproto.message_field(8)
    round_cnt: int = betterproto.uint32_field(9)
    cocoon_dead_wave: int = betterproto.uint32_field(10)
    avatar_battle_turns: int = betterproto.uint32_field(11)
    monster_battle_turns: int = betterproto.uint32_field(12)
    custom_values: Dict[str, float] = betterproto.map_field(
        13, betterproto.TYPE_STRING, betterproto.TYPE_FLOAT
    )
    challenge_score: int = betterproto.uint32_field(14)
    battle_challenge_list: List[int] = betterproto.uint32_field(15)


@dataclass(eq=False, repr=False)
class HeroPath(betterproto.Message):
    hero_path_type: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)
    exp: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class BattleResult(betterproto.Message):
    retcode: "BattleCheckResultType" = betterproto.enum_field(1)
    end_status: "BattleEndStatus" = betterproto.enum_field(2)
    stt: "BattleStatistics" = betterproto.message_field(3)
    game_core_log_encode: bytes = betterproto.bytes_field(4)
    tags: Dict[str, int] = betterproto.map_field(
        5, betterproto.TYPE_STRING, betterproto.TYPE_UINT32
    )
    mismatch_turn_count: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class CharacterSnapshot(betterproto.Message):
    runtime_id: int = betterproto.uint32_field(1)
    properties: List[int] = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class AnimEventSnapshot(betterproto.Message):
    event_name: str = betterproto.string_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class LoginActivityData(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    login_days: int = betterproto.uint32_field(2)
    has_taken_login_activity_reward_days_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GetLoginActivityCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetLoginActivityScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    login_activity_list: List["LoginActivityData"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class TakeLoginActivityRewardCsReq(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    take_days: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TakeLoginActivityRewardScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    id: int = betterproto.uint32_field(2)
    take_days: int = betterproto.uint32_field(3)
    reward: "ItemList" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class EnterAdventureCsReq(betterproto.Message):
    map_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class EnterAdventureScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    scene: "SceneInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ArchiveData(betterproto.Message):
    item_id_list: List[int] = betterproto.uint32_field(1)
    monster_template_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GetArchiveDataCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetArchiveDataScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    archive_data: "ArchiveData" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetUpdatedArchiveDataCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetUpdatedArchiveDataScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    archive_data: "ArchiveData" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetAvatarDataCsReq(betterproto.Message):
    is_get_all: bool = betterproto.bool_field(1)
    base_avatar_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class EquipRelic(betterproto.Message):
    type: int = betterproto.uint32_field(1)
    relic_unique_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class Avatar(betterproto.Message):
    base_avatar_id: int = betterproto.uint32_field(1)
    exp: int = betterproto.uint32_field(2)
    level: int = betterproto.uint32_field(3)
    promotion: int = betterproto.uint32_field(4)
    rank: int = betterproto.uint32_field(5)
    skilltree_list: List["AvatarSkillTree"] = betterproto.message_field(6)
    equipment_unique_id: int = betterproto.uint32_field(7)
    equip_relic_list: List["EquipRelic"] = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class GetAvatarDataScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    avatar_list: List["Avatar"] = betterproto.message_field(2)
    is_all: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class AvatarExpUpCsReq(betterproto.Message):
    base_avatar_id: int = betterproto.uint32_field(1)
    item_cost: "ItemCostData" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AvatarExpUpScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    return_item_list: List["PileItem"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class UnlockSkilltreeCsReq(betterproto.Message):
    point_id: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)
    item_list: List["ItemCost"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class UnlockSkilltreeScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    base_avatar_id: int = betterproto.uint32_field(2)
    point_id: int = betterproto.uint32_field(3)
    level: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class PromoteAvatarCsReq(betterproto.Message):
    base_avatar_id: int = betterproto.uint32_field(1)
    item_list: List["ItemCost"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PromoteAvatarScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class DressAvatarCsReq(betterproto.Message):
    equipment_unique_id: int = betterproto.uint32_field(1)
    base_avatar_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class DressAvatarScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TakeOffEquipmentCsReq(betterproto.Message):
    base_avatar_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TakeOffEquipmentScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AddAvatarScNotify(betterproto.Message):
    base_avatar_id: int = betterproto.uint32_field(1)
    reward: "ItemList" = betterproto.message_field(2)
    src: "AddAvatarSrc" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class RankUpAvatarCsReq(betterproto.Message):
    base_avatar_id: int = betterproto.uint32_field(1)
    rank: int = betterproto.uint32_field(2)
    cost_data: "ItemCostData" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class RankUpAvatarScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class DressRelicAvatarCsReq(betterproto.Message):
    relic_type: int = betterproto.uint32_field(1)
    relic_unique_id: int = betterproto.uint32_field(2)
    base_avatar_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class DressRelicAvatarScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TakeOffRelicCsReq(betterproto.Message):
    relic_type: int = betterproto.uint32_field(1)
    base_avatar_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TakeOffRelicScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class PveBattleResultCsReq(betterproto.Message):
    stage_id: int = betterproto.uint32_field(1)
    op_list: List["BattleOp"] = betterproto.message_field(2)
    turn_snapshot_hash: bytes = betterproto.bytes_field(3)
    cost_time: int = betterproto.uint32_field(4)
    debug_extra_info: str = betterproto.string_field(5)
    res_version: int = betterproto.uint32_field(6)
    is_ai_consider_ultra_skill: bool = betterproto.bool_field(7)
    end_status: "BattleEndStatus" = betterproto.enum_field(8)
    stt: "BattleStatistics" = betterproto.message_field(9)
    battle_id: int = betterproto.uint32_field(10)


@dataclass(eq=False, repr=False)
class PveBattleResultScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    stage_id: int = betterproto.uint32_field(2)
    cur_finish_challenge: int = betterproto.uint32_field(3)
    drop_data: "ItemList" = betterproto.message_field(4)
    avatar_exp_reward: int = betterproto.uint32_field(5)
    bin_ver: str = betterproto.string_field(6)
    res_ver: str = betterproto.string_field(7)
    battle_id: int = betterproto.uint32_field(8)
    end_status: "BattleEndStatus" = betterproto.enum_field(9)
    extra_drop_data: "ItemList" = betterproto.message_field(10)
    check_identical: bool = betterproto.bool_field(11)
    event_id: int = betterproto.uint32_field(12)
    mismatch_turn_count: int = betterproto.uint32_field(13)


@dataclass(eq=False, repr=False)
class QuitBattleCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QuitBattleScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetCurBattleInfoCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetCurBattleInfoScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    stage_id: int = betterproto.uint32_field(2)
    logic_random_seed: int = betterproto.uint32_field(3)
    avatar_list: List["BattleAvatar"] = betterproto.message_field(4)
    battle_info: "SceneBattleInfo" = betterproto.message_field(5)
    last_end_status: "BattleEndStatus" = betterproto.enum_field(6)
    last_event_id: int = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class SyncClientResVersionCsReq(betterproto.Message):
    res_version: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SyncClientResVersionScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    res_version: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class QuitBattleScNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class Challenge(betterproto.Message):
    challenge_id: int = betterproto.uint32_field(1)
    stars: int = betterproto.uint32_field(2)
    taken_reward: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GetChallengeCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetChallengeScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    challenge_list: List["Challenge"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class StartChallengeCsReq(betterproto.Message):
    challenge_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class StartChallengeScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    maze: "Maze" = betterproto.message_field(2)
    cur_challenge: "CurChallenge" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class LeaveChallengeCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class LeaveChallengeScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    maze: "Maze" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ChallengeSettleNotify(betterproto.Message):
    challenge_id: int = betterproto.uint32_field(1)
    is_win: bool = betterproto.bool_field(2)
    reward: "ItemList" = betterproto.message_field(3)
    stars: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class FinishChallengeCsReq(betterproto.Message):
    challenge_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class FinishChallengeScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class KillMonster(betterproto.Message):
    monster_id: int = betterproto.uint32_field(1)
    kill_num: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class CurChallenge(betterproto.Message):
    challenge_id: int = betterproto.uint32_field(1)
    rounds: int = betterproto.uint32_field(2)
    status: "ChallengeStatus" = betterproto.enum_field(3)
    extra_lineup_type: "ExtraLineupType" = betterproto.enum_field(4)
    kill_monster_list: List["KillMonster"] = betterproto.message_field(5)
    dead_avatar_num: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class GetCurChallengeCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetCurChallengeScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    cur_challenge: "CurChallenge" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ChallengeLineupNotify(betterproto.Message):
    extra_lineup_type: "ExtraLineupType" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class TakeChallengeTargetRewardCsReq(betterproto.Message):
    challenge_id: int = betterproto.uint32_field(1)
    index_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TakeChallengeTargetRewardScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    challenge_id: int = betterproto.uint32_field(2)
    taken_index_list: List[int] = betterproto.uint32_field(3)
    reward: "ItemList" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class Item(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)
    num: int = betterproto.uint32_field(2)
    level: int = betterproto.uint32_field(3)
    rank: int = betterproto.uint32_field(4)
    promotion: int = betterproto.uint32_field(5)
    unique_id: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class ItemList(betterproto.Message):
    item_list: List["Item"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PileItem(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)
    item_num: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ItemCost(betterproto.Message):
    pile_item: "PileItem" = betterproto.message_field(1, group="Item")
    equipment_unique_id: int = betterproto.uint32_field(2, group="Item")
    relic_unique_id: int = betterproto.uint32_field(3, group="Item")


@dataclass(eq=False, repr=False)
class ItemCostData(betterproto.Message):
    item_list: List["ItemCost"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SceneMonsterWave(betterproto.Message):
    monster_id_list: List[int] = betterproto.uint32_field(1)
    drop_list: List["ItemList"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SceneBattleInfo(betterproto.Message):
    logic_random_seed: int = betterproto.uint32_field(1)
    stage_id: int = betterproto.uint32_field(2)
    monster_wave_list: List["SceneMonsterWave"] = betterproto.message_field(3)
    battle_avatar_list: List["BattleAvatar"] = betterproto.message_field(4)
    buff_list: List["BattleBuff"] = betterproto.message_field(5)
    battle_id: int = betterproto.uint32_field(6)
    hero_path_list: List["HeroPath"] = betterproto.message_field(7)
    rounds_limit: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class DialogueEvent(betterproto.Message):
    dialogue_group_id: int = betterproto.uint32_field(1)
    dialogue_event_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class DialogueResultInfo(betterproto.Message):
    item_result: "ItemList" = betterproto.message_field(1, group="result")
    rogue_buff_result: "RogueBuffList" = betterproto.message_field(2, group="result")


@dataclass(eq=False, repr=False)
class GetDialogueEventDataCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetDialogueEventDataScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    dialogue_event_list: List["DialogueEvent"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SelectDialogueEventCsReq(betterproto.Message):
    dialogue_group_id: int = betterproto.uint32_field(1)
    dialogue_event_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SelectDialogueEventScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    dialogue_group_id: int = betterproto.uint32_field(2)
    dialogue_event_id: int = betterproto.uint32_field(3)
    result_info: "DialogueResultInfo" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class SyncDialogueEventDataScNotify(betterproto.Message):
    dialogue_event_list: List["DialogueEvent"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Expedition(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    accept_time: int = betterproto.uint32_field(2)
    duration: int = betterproto.uint32_field(3)
    avatar_id_list: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class GetExpeditionDataCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetExpeditionDataScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    team_count: int = betterproto.uint32_field(2)
    unlocked_expedition_id_list: List[int] = betterproto.uint32_field(3)
    expedtion_list: List["Expedition"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class AcceptExpeditionCsReq(betterproto.Message):
    expedition: "Expedition" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AcceptExpeditionScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    expedition: "Expedition" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CancelExpeditionCsReq(betterproto.Message):
    expedition_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CancelExpeditionScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    expedition_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TakeExpeditionRewardCsReq(betterproto.Message):
    expedition_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TakeExpeditionRewardScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    expedition_id: int = betterproto.uint32_field(2)
    reward: "ItemList" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GetGachaInfoCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GachaInfo(betterproto.Message):
    gacha_id: int = betterproto.uint32_field(1)
    begin_time: int = betterproto.uint32_field(2)
    end_time: int = betterproto.uint32_field(3)
    detail_webview: str = betterproto.string_field(4)
    newbie_gacha_cnt: int = betterproto.uint32_field(5)
    today_gacha_cnt: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class GetGachaInfoScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    gacha_info_list: List["GachaInfo"] = betterproto.message_field(2)
    gacha_random: int = betterproto.uint32_field(3)
    today_total_gacha_cnt: int = betterproto.uint32_field(4)
    today_single_gacha_max_cnt: int = betterproto.uint32_field(5)
    today_total_gacha_max_cnt: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class DoGachaCsReq(betterproto.Message):
    gacha_id: int = betterproto.uint32_field(1)
    gacha_num: int = betterproto.uint32_field(2)
    gacha_random: int = betterproto.uint32_field(3)
    simulate_magic: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class GachaItem(betterproto.Message):
    gacha_item: "Item" = betterproto.message_field(1)
    transfer_item_list: "ItemList" = betterproto.message_field(2)
    is_new: bool = betterproto.bool_field(3)
    token_item: "ItemList" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class DoGachaScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    gacha_id: int = betterproto.uint32_field(2)
    gacha_num: int = betterproto.uint32_field(3)
    gacha_item_list: List["GachaItem"] = betterproto.message_field(4)
    new_gacha_random: int = betterproto.uint32_field(5)
    newbie_gacha_cnt: int = betterproto.uint32_field(6)
    today_gacha_cnt: int = betterproto.uint32_field(7)
    today_total_gacha_cnt: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class GetBagCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class Equipment(betterproto.Message):
    unique_id: int = betterproto.uint32_field(1)
    tid: int = betterproto.uint32_field(2)
    level: int = betterproto.uint32_field(3)
    exp: int = betterproto.uint32_field(4)
    rank: int = betterproto.uint32_field(5)
    base_avatar_id: int = betterproto.uint32_field(6)
    is_protected: bool = betterproto.bool_field(7)
    promotion: int = betterproto.uint32_field(8)


@dataclass(eq=False, repr=False)
class Relic(betterproto.Message):
    unique_id: int = betterproto.uint32_field(1)
    tid: int = betterproto.uint32_field(2)
    level: int = betterproto.uint32_field(3)
    exp: int = betterproto.uint32_field(4)
    base_avatar_id: int = betterproto.uint32_field(5)
    is_protected: bool = betterproto.bool_field(6)
    main_affix_id: int = betterproto.uint32_field(7)
    sub_affix_list: List["RelicAffix"] = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class Material(betterproto.Message):
    tid: int = betterproto.uint32_field(1)
    num: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class WaitDelResource(betterproto.Message):
    tid: int = betterproto.uint32_field(1)
    num: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GetBagScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    equipment_list: List["Equipment"] = betterproto.message_field(2)
    material_list: List["Material"] = betterproto.message_field(3)
    relic_list: List["Relic"] = betterproto.message_field(4)
    rogue_item_list: List["Material"] = betterproto.message_field(5)
    wait_del_resource_list: List["WaitDelResource"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class PromoteEquipmentCsReq(betterproto.Message):
    equipment_unique_id: int = betterproto.uint32_field(1)
    cost_data: "ItemCostData" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PromoteEquipmentScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class LockEquipmentCsReq(betterproto.Message):
    equipment_unique_id: int = betterproto.uint32_field(1)
    is_lock: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class LockEquipmentScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    equipment_unique_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class UseItemCsReq(betterproto.Message):
    use_item_id: int = betterproto.uint32_field(1)
    use_item_count: int = betterproto.uint32_field(2)
    base_avatar_id: int = betterproto.uint32_field(3)
    use_avatar_type: "AvatarType" = betterproto.enum_field(4)
    optional_reward_id: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class UseItemScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    use_item_id: int = betterproto.uint32_field(2)
    use_item_count: int = betterproto.uint32_field(3)
    return_data: "ItemList" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class RankUpEquipmentCsReq(betterproto.Message):
    equipment_unique_id: int = betterproto.uint32_field(1)
    equipment_id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class RankUpEquipmentScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ExpUpEquipmentCsReq(betterproto.Message):
    equipment_unique_id: int = betterproto.uint32_field(1)
    cost_data: "ItemCostData" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ExpUpEquipmentScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    return_item_list: List["PileItem"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ComposeItemCsReq(betterproto.Message):
    compose_id: int = betterproto.uint32_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ComposeItemScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    compose_id: int = betterproto.uint32_field(2)
    count: int = betterproto.uint32_field(3)
    return_item_list: "ItemList" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ExpUpRelicCsReq(betterproto.Message):
    relic_unique_id: int = betterproto.uint32_field(1)
    cost_data: "ItemCostData" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ExpUpRelicScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    return_item_list: List["PileItem"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class LockRelicCsReq(betterproto.Message):
    relic_unique_id: int = betterproto.uint32_field(1)
    is_lock: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class LockRelicScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    relic_unique_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SellItemCsReq(betterproto.Message):
    cost_data: "ItemCostData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SellItemScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    return_item_list: "ItemList" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class RechargeSuccNotify(betterproto.Message):
    item_list: "ItemList" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetStageLineupCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class StageLineup(betterproto.Message):
    stage_type: int = betterproto.uint32_field(1)
    lineup_index: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GetStageLineupScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    stage_lineup_list: List["StageLineup"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class LineupAvatar(betterproto.Message):
    slot: int = betterproto.uint32_field(1)
    avatar_type: "AvatarType" = betterproto.enum_field(2)
    id: int = betterproto.uint32_field(3)
    hp: int = betterproto.uint32_field(4)
    sp: int = betterproto.uint32_field(5)
    satiety: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class LineupInfo(betterproto.Message):
    avatar_list: List["LineupAvatar"] = betterproto.message_field(1)
    is_virtual: bool = betterproto.bool_field(2)
    plane_id: int = betterproto.uint32_field(3)
    mp: int = betterproto.uint32_field(4)
    leader_slot: int = betterproto.uint32_field(5)
    index: int = betterproto.uint32_field(6)
    extra_lineup_type: "ExtraLineupType" = betterproto.enum_field(7)
    name: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class GetCurLineupDataCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetCurLineupDataScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    lineup: "LineupInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class JoinLineupCsReq(betterproto.Message):
    base_avatar_id: int = betterproto.uint32_field(1)
    is_virtual: bool = betterproto.bool_field(2)
    plane_id: int = betterproto.uint32_field(3)
    slot: int = betterproto.uint32_field(4)
    index: int = betterproto.uint32_field(5)
    extra_lineup_type: "ExtraLineupType" = betterproto.enum_field(6)


@dataclass(eq=False, repr=False)
class JoinLineupScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class QuitLineupCsReq(betterproto.Message):
    base_avatar_id: int = betterproto.uint32_field(1)
    is_virtual: bool = betterproto.bool_field(2)
    plane_id: int = betterproto.uint32_field(3)
    index: int = betterproto.uint32_field(4)
    extra_lineup_type: "ExtraLineupType" = betterproto.enum_field(5)


@dataclass(eq=False, repr=False)
class QuitLineupScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    base_avatar_id: int = betterproto.uint32_field(2)
    is_mainline: bool = betterproto.bool_field(3)
    plane_id: int = betterproto.uint32_field(4)
    is_virtual: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class SwapLineupCsReq(betterproto.Message):
    is_virtual: bool = betterproto.bool_field(1)
    plane_id: int = betterproto.uint32_field(2)
    src_slot: int = betterproto.uint32_field(3)
    dst_slot: int = betterproto.uint32_field(4)
    index: int = betterproto.uint32_field(5)
    extra_lineup_type: "ExtraLineupType" = betterproto.enum_field(6)


@dataclass(eq=False, repr=False)
class SwapLineupScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SyncLineupNotify(betterproto.Message):
    lineup: "LineupInfo" = betterproto.message_field(1)
    reason_list: List["SyncLineupReason"] = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class GetLineupAvatarDataCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class LineupAvatarData(betterproto.Message):
    avatar_type: "AvatarType" = betterproto.enum_field(1)
    id: int = betterproto.uint32_field(2)
    hp: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GetLineupAvatarDataScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    avatar_data_list: List["LineupAvatarData"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ChangeLineupLeaderCsReq(betterproto.Message):
    slot: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ChangeLineupLeaderScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    slot: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SwitchLineupIndexCsReq(betterproto.Message):
    index: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SwitchLineupIndexScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    index: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SetLineupNameCsReq(betterproto.Message):
    name: str = betterproto.string_field(1)
    index: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SetLineupNameScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    name: str = betterproto.string_field(2)
    index: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GetAllLineupDataCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetAllLineupDataScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    cur_index: int = betterproto.uint32_field(2)
    lineup_list: List["LineupInfo"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class VirtualLineupDestroyNotify(betterproto.Message):
    plane_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetMailCsReq(betterproto.Message):
    start: int = betterproto.uint32_field(1)
    stop: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ClientMail(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    template_id: int = betterproto.uint32_field(2)
    title: str = betterproto.string_field(3)
    content: str = betterproto.string_field(4)
    sender: str = betterproto.string_field(5)
    time: int = betterproto.uint32_field(6)
    attachment: "ItemList" = betterproto.message_field(7)
    is_read: bool = betterproto.bool_field(8)
    expire_time: int = betterproto.uint32_field(9)
    para_list: List[str] = betterproto.string_field(10)


@dataclass(eq=False, repr=False)
class GetMailScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    mail_list: List["ClientMail"] = betterproto.message_field(2)
    is_end: bool = betterproto.bool_field(3)
    total_num: int = betterproto.uint32_field(4)
    start: int = betterproto.uint32_field(5)
    notice_mail_list: List["ClientMail"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class MarkReadMailCsReq(betterproto.Message):
    id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class MarkReadMailScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class DelMailCsReq(betterproto.Message):
    id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class DelMailScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    id_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TakeMailAttachmentCsReq(betterproto.Message):
    mail_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ClientMailAttachmentItem(betterproto.Message):
    mail_id: int = betterproto.uint32_field(1)
    item_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TakeMailAttachmentScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    succ_mail_id_list: List[int] = betterproto.uint32_field(2)
    attachment: "ItemList" = betterproto.message_field(3)
    fail_mail_list: List["ClientMailAttachmentItem"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class NewMailScNotify(betterproto.Message):
    mail_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class MazeFloor(betterproto.Message):
    floor_id: int = betterproto.uint32_field(1)
    scene: "SceneInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class Maze(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    floor: "MazeFloor" = betterproto.message_field(2)
    map_entry_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class MazeAvatar(betterproto.Message):
    base_avatar_id: int = betterproto.uint32_field(1)
    left_hp: int = betterproto.uint32_field(2)
    sp: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class MazeMission(betterproto.Message):
    sub_mission_id: int = betterproto.uint32_field(1)
    status: "MissionStatus" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class GetMazeCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetMazeScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    maze_list: List["Maze"] = betterproto.message_field(2)
    cur_series_id: int = betterproto.uint32_field(3)
    finished_plane_list: List[int] = betterproto.uint32_field(4)
    wait_plane_list: List[int] = betterproto.uint32_field(5)
    taken_reward_list: List[int] = betterproto.uint32_field(6)
    avatar_list: List["MazeAvatar"] = betterproto.message_field(7)
    chosen_ability_list: List[int] = betterproto.uint32_field(8)
    candidate_ability_list: List[int] = betterproto.uint32_field(9)
    maze_mission_list: List["MazeMission"] = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class ChooseMazeSeriesCsReq(betterproto.Message):
    series_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ChooseMazeSeriesScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    series_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ChooseMazeAbilityCsReq(betterproto.Message):
    ability_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ChooseMazeAbilityScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    ability_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class EnterMazeCsReq(betterproto.Message):
    entry_id: int = betterproto.uint32_field(1)
    teleport_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class EnterMazeScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    maze: "Maze" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MazeBuffScNotify(betterproto.Message):
    buff_id: int = betterproto.uint32_field(1)
    op: "MazeBuffOp" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class CastMazeSkillCsReq(betterproto.Message):
    skill_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class CastMazeSkillScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class MazePlaneEventScNotify(betterproto.Message):
    item_data: "ItemList" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class EnterMazeByServerScNotify(betterproto.Message):
    maze: "Maze" = betterproto.message_field(1)
    reason: "EnterMazeReason" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class MazePropState(betterproto.Message):
    group_id: int = betterproto.uint32_field(1)
    config_id: int = betterproto.uint32_field(2)
    state: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class MazeGroup(betterproto.Message):
    group_id: int = betterproto.uint32_field(1)
    modify_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GetMazeMapInfoCsReq(betterproto.Message):
    entry_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetMazeMapInfoScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    entry_id: int = betterproto.uint32_field(2)
    lighten_section_list: List[int] = betterproto.uint32_field(3)
    maze_prop_list: List["MazePropState"] = betterproto.message_field(4)
    maze_group_list: List["MazeGroup"] = betterproto.message_field(5)
    opend_chest_num: int = betterproto.uint32_field(6)
    unlock_teleport_list: List[int] = betterproto.uint32_field(7)


@dataclass(eq=False, repr=False)
class GetMazeTimeOfDayCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetMazeTimeOfDayScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    maze_time_of_day_map: Dict[int, int] = betterproto.map_field(
        2, betterproto.TYPE_UINT32, betterproto.TYPE_UINT32
    )


@dataclass(eq=False, repr=False)
class SetMazeTimeOfDayCsReq(betterproto.Message):
    plane_id: int = betterproto.uint32_field(1)
    time_of_day_type: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SetMazeTimeOfDayScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    plane_id: int = betterproto.uint32_field(2)
    time_of_day_type: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class DelMazeTimeOfDayCsReq(betterproto.Message):
    plane_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class DelMazeTimeOfDayScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    plane_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ReturnStartAnchorCsReq(betterproto.Message):
    entry_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReturnStartAnchorScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetNpcMessageGroupCsReq(betterproto.Message):
    contact_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class MessageItem(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)
    text_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class MessageSection(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    message_item_id: int = betterproto.uint32_field(2)
    status: "MessageSectionStatus" = betterproto.enum_field(3)
    item_list: List["MessageItem"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class MessageGroup(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    message_section_id: int = betterproto.uint32_field(2)
    status: "MessageGroupStatus" = betterproto.enum_field(3)
    refresh_time: int = betterproto.uint32_field(4)
    message_section_list: List["MessageSection"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class GetNpcMessageGroupScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    message_group_list: List["MessageGroup"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetNpcStatusCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class NpcStatus(betterproto.Message):
    npc_id: int = betterproto.uint32_field(1)
    is_finish: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class GroupStatus(betterproto.Message):
    group_id: int = betterproto.uint32_field(1)
    group_status: "MessageGroupStatus" = betterproto.enum_field(2)
    refresh_time: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class SectionStatus(betterproto.Message):
    section_id: int = betterproto.uint32_field(1)
    section_status: "MessageSectionStatus" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class GetNpcStatusScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    message_status_list: List["NpcStatus"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class FinishItemIdCsReq(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)
    text_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class FinishItemIdScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    item_id: int = betterproto.uint32_field(2)
    text_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class FinishSectionIdCsReq(betterproto.Message):
    section_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class FinishSectionIdScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    section_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GetMissionDataCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class Mission(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    status: "MissionStatus" = betterproto.enum_field(2)
    progress: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GetMissionDataScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    mission_list: List["Mission"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class FinishTalkMissionCsReq(betterproto.Message):
    talk_str: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class FinishTalkMissionScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    talk_str: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MissionRewardScNotify(betterproto.Message):
    main_mission_id: int = betterproto.uint32_field(1)
    reward: "ItemList" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SubMissionRewardScNotify(betterproto.Message):
    sub_mission_id: int = betterproto.uint32_field(1)
    reward: "ItemList" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SyncTaskCsReq(betterproto.Message):
    key: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class SyncTaskScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    key: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class DailyTask(betterproto.Message):
    main_mission_id: int = betterproto.uint32_field(1)
    is_finished: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class DailyTaskDataScNotify(betterproto.Message):
    is_taken_extra_reward: bool = betterproto.bool_field(1)
    finished_num: int = betterproto.uint32_field(2)
    daily_task_list: List["DailyTask"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TakeDailyTaskExtraRewardCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class TakeDailyTaskExtraRewardScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    reward: "ItemList" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class DailyTaskRewardScNotify(betterproto.Message):
    count: int = betterproto.uint32_field(1)
    reward: "ItemList" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MissionGroupWarnScNotify(betterproto.Message):
    group_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class FinishCosumeItemMissionCsReq(betterproto.Message):
    sub_mission_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class FinishCosumeItemMissionScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    sub_mission_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GetMissionEventDataCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetMissionEventDataScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    mission_event_list: List["Mission"] = betterproto.message_field(2)
    challenge_event_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class MissionEventRewardScNotify(betterproto.Message):
    mission_event_id: int = betterproto.uint32_field(1)
    reward: "ItemList" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AcceptMissionEventCsReq(betterproto.Message):
    mission_event_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AcceptMissionEventScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    mission_event: "Mission" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetMissionStatusCsReq(betterproto.Message):
    main_mission_id_list: List[int] = betterproto.uint32_field(1)
    sub_mission_id_list: List[int] = betterproto.uint32_field(2)
    mission_event_id_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GetMissionStatusScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    finished_main_mission_id_list: List[int] = betterproto.uint32_field(2)
    unfinished_main_mission_id_list: List[int] = betterproto.uint32_field(3)
    sub_mission_status_list: List["Mission"] = betterproto.message_field(4)
    mission_event_status_list: List["Mission"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class InterruptMissionEventCsReq(betterproto.Message):
    mission_event_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class InterruptMissionEventScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    mission_event_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SetMissionEventProgressCsReq(betterproto.Message):
    mission_event_id: int = betterproto.uint32_field(1)
    progress: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SetMissionEventProgressScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class PlayerLoginCsReq(betterproto.Message):
    platform: "PlatformType" = betterproto.enum_field(1)
    cps: str = betterproto.string_field(2)
    device_uuid: str = betterproto.string_field(3)
    device_info: str = betterproto.string_field(4)
    system_info: str = betterproto.string_field(5)
    client_version: str = betterproto.string_field(6)
    language: "LanguageType" = betterproto.enum_field(7)
    last_server_packet_id: int = betterproto.uint32_field(8)
    check_sum_1: str = betterproto.string_field(9)
    check_sum_2: str = betterproto.string_field(10)
    signature: str = betterproto.string_field(11)
    resolution: str = betterproto.string_field(12)
    login_random: int = betterproto.uint64_field(13)
    system_language: str = betterproto.string_field(14)
    res_version: int = betterproto.uint32_field(15)
    client_time_zone: str = betterproto.string_field(16)


@dataclass(eq=False, repr=False)
class PlayerLoginScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    is_new_player: bool = betterproto.bool_field(2)
    basic_info: "PlayerBasicInfo" = betterproto.message_field(3)
    server_timestamp_ms: int = betterproto.uint64_field(4)
    stamina: int = betterproto.uint32_field(5)
    is_relay: bool = betterproto.bool_field(6)
    login_random: int = betterproto.uint64_field(7)
    cur_timezone: int = betterproto.int32_field(8)
    bs_bin_version: str = betterproto.string_field(10)


@dataclass(eq=False, repr=False)
class PlayerLogoutCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class PlayerGetTokenCsReq(betterproto.Message):
    channel_id: int = betterproto.uint32_field(1)
    account_uid: str = betterproto.string_field(2)
    token: str = betterproto.string_field(3)
    uid: int = betterproto.uint32_field(4)
    device: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class PlayerGetTokenScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    uid: int = betterproto.uint32_field(2)
    black_info: "BlackInfo" = betterproto.message_field(3)
    msg: str = betterproto.string_field(4)
    secret_key_seed: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class PlayerKeepAliveNotify(betterproto.Message):
    data: "ClientUploadData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GmTalkScNotify(betterproto.Message):
    msg: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class PlayerKickOutScNotify(betterproto.Message):
    kick_type: "PlayerKickOutScNotifyKickType" = betterproto.enum_field(1)
    black_info: "BlackInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GmTalkCsReq(betterproto.Message):
    msg: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GmTalkScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    retmsg: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetBasicInfoCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetBasicInfoScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    next_recover_time: int = betterproto.uint32_field(2)
    exchange_times: int = betterproto.uint32_field(3)
    week_cocoon_finished_count: int = betterproto.uint32_field(4)
    cur_day: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class ExchangeStaminaCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ExchangeStaminaScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    stamina_add: int = betterproto.uint32_field(2)
    item_cost_list: List["ItemCost"] = betterproto.message_field(3)
    last_recover_time: int = betterproto.uint32_field(4)
    exchange_times: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class GetAuthkeyCsReq(betterproto.Message):
    auth_appid: str = betterproto.string_field(1)
    sign_type: int = betterproto.uint32_field(2)
    authkey_ver: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GetAuthkeyScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    authkey: str = betterproto.string_field(2)
    auth_appid: str = betterproto.string_field(3)
    sign_type: int = betterproto.uint32_field(4)
    authkey_ver: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class RegionStopScNotify(betterproto.Message):
    stop_begin_time: int = betterproto.uint32_field(1)
    stop_end_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AntiAddictScNotify(betterproto.Message):
    msg_type: int = betterproto.uint32_field(1)
    msg: str = betterproto.string_field(2)
    level: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class SetNicknameCsReq(betterproto.Message):
    nickname: str = betterproto.string_field(1)
    is_modify: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class SetNicknameScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    is_modify: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class GetLevelRewardTakenListCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetLevelRewardTakenListScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    taken_level_list: List[int] = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GetLevelRewardCsReq(betterproto.Message):
    level: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetLevelRewardScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    reward: "ItemList" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SyncTimeCsReq(betterproto.Message):
    client_time_ms: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class SyncTimeScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    client_time_ms: int = betterproto.uint64_field(2)
    server_time_ms: int = betterproto.uint64_field(3)
    download_data: "ClientDownloadData" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class SetLanguageCsReq(betterproto.Message):
    language: "LanguageType" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class SetLanguageScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    language: "LanguageType" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class AnnounceData(betterproto.Message):
    config_id: int = betterproto.uint32_field(1)
    begin_time: int = betterproto.uint32_field(2)
    end_time: int = betterproto.uint32_field(3)
    center_system_text: str = betterproto.string_field(4)
    count_down_text: str = betterproto.string_field(5)
    dungeon_confirm_text: str = betterproto.string_field(6)
    center_system_frequency: int = betterproto.uint32_field(7)
    count_down_frequency: int = betterproto.uint32_field(8)
    is_center_system_last_5_every_minutes: bool = betterproto.bool_field(9)


@dataclass(eq=False, repr=False)
class ServerAnnounceNotify(betterproto.Message):
    announce_data_list: List["AnnounceData"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Gateserver(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    msg: str = betterproto.string_field(2)
    region_name: str = betterproto.string_field(3)
    ip: str = betterproto.string_field(4)
    port: int = betterproto.uint32_field(5)
    stop_begin_time: int = betterproto.uint32_field(6)
    stop_end_time: int = betterproto.uint32_field(7)
    data_use_asset_boundle: bool = betterproto.bool_field(8)
    res_use_asset_boundle: bool = betterproto.bool_field(9)
    asset_bundle_url: str = betterproto.string_field(10)
    ex_resource_url: str = betterproto.string_field(11)
    lua_url: str = betterproto.string_field(12)
    asb_relogin: int = betterproto.uint32_field(13)
    asb_memo: str = betterproto.string_field(14)
    design_data_relogin: int = betterproto.uint32_field(15)
    design_data_memo: str = betterproto.string_field(16)
    client_secret_key: str = betterproto.string_field(17)
    record_game_object_user_data: str = betterproto.string_field(18)
    use_tcp: bool = betterproto.bool_field(19)
    custom_service_url: str = betterproto.string_field(20)
    operation_feedback_url: str = betterproto.string_field(21)
    privacy_in_game_url: str = betterproto.string_field(22)
    client_record_replay: bool = betterproto.bool_field(23)
    server_description: str = betterproto.string_field(24)


@dataclass(eq=False, repr=False)
class SetHeroBasicTypeCsReq(betterproto.Message):
    basic_type: "HeroBasicType" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class SetHeroBasicTypeScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    basic_type: "HeroBasicType" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class GetHeroBasicTypeInfoCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class HeroBasicTypeInfo(betterproto.Message):
    basic_type: "HeroBasicType" = betterproto.enum_field(1)
    rank: int = betterproto.uint32_field(2)
    skill_tree_list: List["AvatarSkillTree"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GetHeroBasicTypeInfoScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    gender: "Gender" = betterproto.enum_field(2)
    cur_basic_type: "HeroBasicType" = betterproto.enum_field(3)
    basic_type_info_list: List["HeroBasicTypeInfo"] = betterproto.message_field(4)
    hero_path_list: List["HeroPath"] = betterproto.message_field(5)
    is_gender_modified: bool = betterproto.bool_field(6)
    is_player_info_modified: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class GetHeroPathCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetHeroPathScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    hero_path_list: List["HeroPath"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class HeroPathChangedNotify(betterproto.Message):
    hero_path: "HeroPath" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SetGenderCsReq(betterproto.Message):
    gender: "Gender" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class SetGenderScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    cur_basic_type: "HeroBasicType" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class SetPlayerInfoCsReq(betterproto.Message):
    nickname: str = betterproto.string_field(1)
    is_modify: bool = betterproto.bool_field(2)
    gender: "Gender" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class SetPlayerInfoScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    cur_basic_type: "HeroBasicType" = betterproto.enum_field(2)
    is_modify: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class HeroBasicTypeChangedNotify(betterproto.Message):
    cur_basic_type: "HeroBasicType" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class QueryProductInfoCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class Product(betterproto.Message):
    product_id: str = betterproto.string_field(1)
    price_tier: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryProductInfoScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    product_list: List["Product"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ClientDownloadDataScNotify(betterproto.Message):
    download_data: "ClientDownloadData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class UpdateFeatureSwitchScNotify(betterproto.Message):
    switch_info_list: List["FeatureSwitchInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DailyRefreshNotify(betterproto.Message):
    cur_day: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class FinishPlotCsReq(betterproto.Message):
    plot_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class FinishPlotScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    plot_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class PrestigeInfo(betterproto.Message):
    prestige_id: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)
    exp: int = betterproto.uint32_field(3)
    taken_level_list: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class GetPrestigeInfoCsReq(betterproto.Message):
    prestige_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetPrestigeInfoScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    prestige_info: "PrestigeInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PrestigeInfoChangeNotify(betterproto.Message):
    prestige_info: "PrestigeInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TakePrestigeLevelRewardCsReq(betterproto.Message):
    prestige_id: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TakePrestigeLevelRewardScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    prestige_id: int = betterproto.uint32_field(2)
    reward: "ItemList" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GetQuestDataCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class Quest(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    status: "QuestStatus" = betterproto.enum_field(2)
    progress: int = betterproto.uint32_field(3)
    finish_time: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class GetQuestDataScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    quest_list: List["Quest"] = betterproto.message_field(2)
    total_achievement_exp: int = betterproto.uint32_field(3)
    taken_achievement_level_list: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class TakeQuestRewardCsReq(betterproto.Message):
    quest_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TakeQuestRewardScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    reward: "ItemList" = betterproto.message_field(2)
    succ_quest_id_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class TakeAchievementLevelRewardCsReq(betterproto.Message):
    achievement_level_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TakeAchievementLevelRewardScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    reward: "ItemList" = betterproto.message_field(2)
    succ_achievement_level_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class StartRaidCsReq(betterproto.Message):
    prop_entity_id: int = betterproto.uint32_field(1)
    raid_id: int = betterproto.uint32_field(2)
    world_level: int = betterproto.uint32_field(3)
    avatar_list: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class StartRaidScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class LeaveRaidCsReq(betterproto.Message):
    raid_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class LeaveRaidScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class RaidInfoNotify(betterproto.Message):
    raid_id: int = betterproto.uint32_field(1)
    world_level: int = betterproto.uint32_field(2)
    status: "RaidStatus" = betterproto.enum_field(3)
    item_list: "ItemList" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ChallengeRaid(betterproto.Message):
    raid_id: int = betterproto.uint32_field(1)
    max_score: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GetChallengeRaidInfoCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetChallengeRaidInfoScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    challenge_raid_list: List["ChallengeRaid"] = betterproto.message_field(2)
    taken_reward_id_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class TakeChallengeRaidRewardCsReq(betterproto.Message):
    reward_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class TakeChallengeRaidRewardScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    reward_id: int = betterproto.uint32_field(2)
    reward: "ItemList" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ChallengeRaidNotify(betterproto.Message):
    challenge_raid: "ChallengeRaid" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class RogueBuff(betterproto.Message):
    buff_id: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class RogueBuffList(betterproto.Message):
    buff_list: List["RogueBuff"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class RogueRoom(betterproto.Message):
    room_id: int = betterproto.uint32_field(1)
    status: "RogueRoomStatus" = betterproto.enum_field(2)
    site_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class RogueLevel(betterproto.Message):
    level_id: int = betterproto.uint32_field(1)
    map_id: int = betterproto.uint32_field(2)
    room_list: List["RogueRoom"] = betterproto.message_field(3)
    cur_room_id: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class RogueBless(betterproto.Message):
    bless_id: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class RogueBlessInfo(betterproto.Message):
    bless_list: List["RogueBless"] = betterproto.message_field(1)
    active_bless_id: int = betterproto.uint32_field(2)
    bless: "RogueBless" = betterproto.message_field(3)
    monster_kill_count: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class RogueBuffSelectInfo(betterproto.Message):
    roll_buff_count: int = betterproto.uint32_field(1)
    rogue_coin: int = betterproto.uint32_field(2)
    left_select_count: int = betterproto.uint32_field(3)
    maze_buff_list: List["RogueBuff"] = betterproto.message_field(4)
    roll_buff_max_count: int = betterproto.uint32_field(5)
    roll_buff_cost_data: "ItemCostData" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class RogueShopBuff(betterproto.Message):
    buff_info: "RogueBuff" = betterproto.message_field(1)
    total_count: int = betterproto.uint32_field(2)
    left_count: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class RogueShopItem(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)
    total_count: int = betterproto.uint32_field(2)
    left_count: int = betterproto.uint32_field(3)
    cost_data: "ItemCostData" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class RogueShopInfo(betterproto.Message):
    rogue_shop_id: int = betterproto.uint32_field(1)
    shop_buff_list: List["RogueShopBuff"] = betterproto.message_field(2)
    shop_item_list: List["RogueShopItem"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class RogueAppraisalRecord(betterproto.Message):
    group_id: int = betterproto.uint32_field(1)
    config_id: int = betterproto.uint32_field(2)
    appraisal_count: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class RogueAppraisalInfo(betterproto.Message):
    appraisal_list: List["RogueAppraisalRecord"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class RogueAppraisalItem(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)
    succ_ratio: float = betterproto.float_field(2)
    perfect_ratio: float = betterproto.float_field(3)


@dataclass(eq=False, repr=False)
class RogueAppraisalItemInfo(betterproto.Message):
    item_list: List["RogueAppraisalItem"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class RogueQuest(betterproto.Message):
    rogue_quest_id: int = betterproto.uint32_field(1)
    world_level: int = betterproto.int32_field(2)
    progress: int = betterproto.uint32_field(3)
    status: "RogueQuestStatus" = betterproto.enum_field(4)
    begin_time: int = betterproto.uint32_field(5)
    end_time: int = betterproto.uint32_field(6)
    type: "RogueQuestType" = betterproto.enum_field(7)


@dataclass(eq=False, repr=False)
class RogueInfo(betterproto.Message):
    status: "RogueStatus" = betterproto.enum_field(1)
    level_info: "RogueLevel" = betterproto.message_field(2)
    room_list: List["RogueRoom"] = betterproto.message_field(3)
    rogue_coin: int = betterproto.uint32_field(4)
    base_avatar_id_list: List[int] = betterproto.uint32_field(5)
    rogue_stamina: int = betterproto.uint32_field(6)
    revive_count: int = betterproto.uint32_field(7)
    recover_stamina_count: int = betterproto.uint32_field(8)
    is_record_saved: bool = betterproto.bool_field(9)
    explore_reward_list: List[int] = betterproto.uint32_field(10)
    season_id: int = betterproto.uint32_field(11)
    begin_time: int = betterproto.uint32_field(12)
    end_time: int = betterproto.uint32_field(13)
    is_win: bool = betterproto.bool_field(14)
    maze_buff_list: List["RogueBuff"] = betterproto.message_field(15)
    extra_buff_list: List["RogueBuff"] = betterproto.message_field(16)
    rogue_explore_exp: int = betterproto.uint32_field(17)
    rogue_explore_lv: int = betterproto.uint32_field(18)
    buff_select_info: "RogueBuffSelectInfo" = betterproto.message_field(19)
    is_pick_avatar: bool = betterproto.bool_field(20)
    bless_info: "RogueBlessInfo" = betterproto.message_field(21)
    buff_score: int = betterproto.uint32_field(22)
    appraisal_info: "RogueAppraisalInfo" = betterproto.message_field(23)
    world_level: int = betterproto.int32_field(24)
    rogue_gacha_item_num_on_enter: int = betterproto.uint32_field(25)
    rogue_quest_list: List["RogueQuest"] = betterproto.message_field(26)


@dataclass(eq=False, repr=False)
class RogueRecord(betterproto.Message):
    slot: int = betterproto.uint32_field(1)
    avatar_list: List[int] = betterproto.uint32_field(2)
    maze_buff_list: List["RogueBuff"] = betterproto.message_field(3)
    name: str = betterproto.string_field(4)
    score: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class RogueChallengeInfo(betterproto.Message):
    is_in_challenge: bool = betterproto.bool_field(1)
    challenge_reward_list: List[int] = betterproto.uint32_field(3)
    histroy_max_score: int = betterproto.uint32_field(4)
    record_list: List["RogueRecord"] = betterproto.message_field(5)
    record_slot: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class RogueFinishInfo(betterproto.Message):
    is_win: bool = betterproto.bool_field(1)
    reward: "ItemList" = betterproto.message_field(2)
    explore_quest_list: List[int] = betterproto.uint32_field(3)
    can_save: bool = betterproto.bool_field(4)
    buff_score: int = betterproto.uint32_field(5)
    rogue_gacha_item_num: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class RogueChallengeSpecialScore(betterproto.Message):
    score_id: int = betterproto.uint32_field(1)
    score: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class RogueChallengeScoreInfo(betterproto.Message):
    total_score: int = betterproto.uint32_field(1)
    turn_score: int = betterproto.uint32_field(2)
    damage_score: int = betterproto.uint32_field(3)
    special_score_list: List["RogueChallengeSpecialScore"] = betterproto.message_field(
        4
    )


@dataclass(eq=False, repr=False)
class RogueChallengeFinishInfo(betterproto.Message):
    is_win: bool = betterproto.bool_field(1)
    rounds: int = betterproto.uint32_field(2)
    damage: float = betterproto.float_field(3)
    reward: "ItemList" = betterproto.message_field(4)
    challenge_quest_list: List[int] = betterproto.uint32_field(6)
    score_info: "RogueChallengeScoreInfo" = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class RogueDialog(betterproto.Message):
    rogue_dialog_id: int = betterproto.uint32_field(1)
    status: "RogueDialogStatus" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class RogueGachaGoods(betterproto.Message):
    gacha_goods_id: int = betterproto.uint32_field(1)
    status: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class RogueGachaInfo(betterproto.Message):
    gacha_pool_id: int = betterproto.uint32_field(1)
    goods_list: List["RogueGachaGoods"] = betterproto.message_field(2)
    wish_id_list: List[int] = betterproto.uint32_field(3)
    cur_wish_id: int = betterproto.uint32_field(4)
    gacha_count: int = betterproto.uint32_field(5)
    total_count: int = betterproto.uint32_field(6)


@dataclass(eq=False, repr=False)
class GetRogueInfoCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetRogueInfoScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    rogue_info: "RogueInfo" = betterproto.message_field(2)
    rogue_challenge_info: "RogueChallengeInfo" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class StartRogueCsReq(betterproto.Message):
    base_avatar_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class StartRogueScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    maze: "Maze" = betterproto.message_field(2)
    rogue_info: "RogueInfo" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class EnterRogueCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class EnterRogueScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    maze: "Maze" = betterproto.message_field(2)
    rogue_info: "RogueInfo" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class LeaveRogueCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class LeaveRogueScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    maze: "Maze" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SyncRogueBuffSelectInfoScNotify(betterproto.Message):
    buff_select_info: "RogueBuffSelectInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SelectRogueBuffCsReq(betterproto.Message):
    maze_buff_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SelectRogueBuffScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    god_plot_id: int = betterproto.uint32_field(2)
    buff_select_info: "RogueBuffSelectInfo" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class RollRogueBuffCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RollRogueBuffScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    buff_select_info: "RogueBuffSelectInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class EnterNextRogueRoomScNotify(betterproto.Message):
    maze: "Maze" = betterproto.message_field(1)
    room: "RogueRoom" = betterproto.message_field(2)
    appraisal_info: "RogueAppraisalInfo" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class SyncRogueFinishScNotify(betterproto.Message):
    finish_info: "RogueFinishInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PickRogueAvatarCsReq(betterproto.Message):
    base_avatar_id: int = betterproto.uint32_field(1)
    prop_entity_id: int = betterproto.uint32_field(2)
    base_avatar_id_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class PickRogueAvatarScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    base_avatar_id: int = betterproto.uint32_field(2)
    base_avatar_id_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AddRogueBuffScNotify(betterproto.Message):
    maze_buff_info: "RogueBuff" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ReviveRogueAvatarCsReq(betterproto.Message):
    base_avatar_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReviveRogueAvatarScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    base_avatar_id: int = betterproto.uint32_field(2)
    rogue_stamina: int = betterproto.uint32_field(3)
    revive_count: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class SaveRogueRecordCsReq(betterproto.Message):
    save: bool = betterproto.bool_field(1)
    slot: int = betterproto.uint32_field(2)
    name: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class SaveRogueRecordScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    record: "RogueRecord" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class RecoverRogueStaminaCsReq(betterproto.Message):
    prop_entity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class RecoverRogueStaminaScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    rogue_stamina: int = betterproto.uint32_field(2)
    rogue_coin: int = betterproto.uint32_field(3)
    recover_stamina_count: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class StartRogueChallengeCsReq(betterproto.Message):
    record_slot: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class StartRogueChallengeScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    maze: "Maze" = betterproto.message_field(2)
    rogue_challenge_info: "RogueChallengeInfo" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class LeaveRogueChallengeCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class LeaveRogueChallengeScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    maze: "Maze" = betterproto.message_field(2)
    rogue_challenge_info: "RogueChallengeInfo" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class SyncRogueChallengeFinishScNotify(betterproto.Message):
    finish_info: "RogueChallengeFinishInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QuitRogueCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QuitRogueScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    finish_info: "RogueFinishInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AppraisalRogueStoneCsReq(betterproto.Message):
    stone_item_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AppraisalRogueStoneScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    result: "RogueStoneAppraisalResult" = betterproto.enum_field(2)
    reward: "ItemList" = betterproto.message_field(3)
    maze_buff_info: "RogueBuff" = betterproto.message_field(4)
    appraisal_record: "RogueAppraisalRecord" = betterproto.message_field(5)
    item_info: "RogueAppraisalItemInfo" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class SyncRogueSeasonFinishScNotify(betterproto.Message):
    finish_info: "RogueFinishInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SyncRogueInfoChangeScNotify(betterproto.Message):
    recover_stamina_count: int = betterproto.uint32_field(1)
    rogue_explore_lv: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class AddRogueExtraBuffScNotify(betterproto.Message):
    extra_buff_info: "RogueBuff" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class EnterRogueMapRoomCsReq(betterproto.Message):
    room_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class EnterRogueMapRoomScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    maze: "Maze" = betterproto.message_field(2)
    cur_room_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class EnterRogueNextLevelCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class EnterRogueNextLevelScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    maze: "Maze" = betterproto.message_field(2)
    level_info: "RogueLevel" = betterproto.message_field(3)
    appraisal_info: "RogueAppraisalInfo" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class SyncRogueMapRoomScNotify(betterproto.Message):
    level_id: int = betterproto.uint32_field(1)
    map_id: int = betterproto.uint32_field(2)
    room_info: "RogueRoom" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class SyncRoguePickAvatarScNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class SetRogueBlessCsReq(betterproto.Message):
    bless_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SetRogueBlessScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    bless_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SyncRogueBlessScNotify(betterproto.Message):
    bless_info: "RogueBlessInfo" = betterproto.message_field(1)
    level_up_max: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class GetRogueShopInfoCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetRogueShopInfoScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    rogue_shop_info: "RogueShopInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class BuyRogueShopBuffCsReq(betterproto.Message):
    buff_id: int = betterproto.uint32_field(1)
    buy_count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class BuyRogueShopBuffScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    buy_rogue_buff: "RogueBuff" = betterproto.message_field(2)
    buy_count: int = betterproto.uint32_field(3)
    rogue_shop_buff: "RogueShopBuff" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class BuyRogueShopItemCsReq(betterproto.Message):
    item_id: int = betterproto.uint32_field(1)
    buy_count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class BuyRogueShopItemScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    item_id: int = betterproto.uint32_field(2)
    buy_count: int = betterproto.uint32_field(3)
    rogue_shop_item: "RogueShopItem" = betterproto.message_field(4)
    rogue_shop_info: "RogueShopInfo" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class FinishRogueDialogueGroupCsReq(betterproto.Message):
    dialogue_group_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class FinishRogueDialogueGroupScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class UnlockRogueRoomCsReq(betterproto.Message):
    room_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class UnlockRogueRoomScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetRogueGachaInfoCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetRogueGachaInfoScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    rogue_gacha_info: "RogueGachaInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SetRogueGachaWishListCsReq(betterproto.Message):
    wish_list_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SetRogueGachaWishListScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    rogue_gacha_info: "RogueGachaInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class DoRogueGachaCsReq(betterproto.Message):
    count: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class DoRogueGachaScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    item_list: "ItemList" = betterproto.message_field(2)
    rogue_gacha_info: "RogueGachaInfo" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class SyncRogueGachaRefreshScNotify(betterproto.Message):
    rogue_gacha_info: "RogueGachaInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetRogueAppraisalItemInfoCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetRogueAppraisalItemInfoScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    item_info: "RogueAppraisalItemInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SyncRogueMiracleGetItemScNotify(betterproto.Message):
    item_data: "ItemList" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SyncRogueQuestScNotify(betterproto.Message):
    rogue_quest: "RogueQuest" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetRogueQuestRewardCsReq(betterproto.Message):
    rogue_quest_id: int = betterproto.uint32_field(1)
    type: "RogueQuestType" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class GetRogueQuestRewardScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    reward: "ItemList" = betterproto.message_field(2)
    rogue_quest: "RogueQuest" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class Vector(betterproto.Message):
    x: int = betterproto.sint32_field(1)
    y: int = betterproto.sint32_field(2)
    z: int = betterproto.sint32_field(3)


@dataclass(eq=False, repr=False)
class MotionInfo(betterproto.Message):
    pos: "Vector" = betterproto.message_field(1)
    rot: "Vector" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SceneActorInfo(betterproto.Message):
    uid: int = betterproto.uint32_field(1)
    avatar_type: "AvatarType" = betterproto.enum_field(2)
    base_avatar_id: int = betterproto.uint32_field(3)
    map_layer: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class SceneNpcMonsterInfo(betterproto.Message):
    monster_id: int = betterproto.uint32_field(1)
    is_gen_monster: bool = betterproto.bool_field(2)
    event_id: int = betterproto.uint32_field(3)
    is_set_world_level: bool = betterproto.bool_field(4)
    world_level: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class NpcRogueInfo(betterproto.Message):
    dialogue_group_id: int = betterproto.uint32_field(1)
    rogue_npc_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class NpcExtraInfo(betterproto.Message):
    rogue_info: "NpcRogueInfo" = betterproto.message_field(1, group="info")


@dataclass(eq=False, repr=False)
class SceneNpcInfo(betterproto.Message):
    npc_id: int = betterproto.uint32_field(1)
    extra_info: "NpcExtraInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PropRogueInfo(betterproto.Message):
    room_id: int = betterproto.uint32_field(1)
    appraisal_count: int = betterproto.uint32_field(2)
    appraisal_max_count: int = betterproto.uint32_field(3)
    pick_avatar_max_count: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class PropExtraInfo(betterproto.Message):
    rogue_info: "PropRogueInfo" = betterproto.message_field(1, group="info")


@dataclass(eq=False, repr=False)
class ScenePropInfo(betterproto.Message):
    prop_id: int = betterproto.uint32_field(1)
    prop_state: int = betterproto.uint32_field(2)
    create_time_ms: int = betterproto.uint64_field(3)
    life_time_ms: int = betterproto.uint32_field(4)
    extra_info: "PropExtraInfo" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class SceneEntityInfo(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    motion: "MotionInfo" = betterproto.message_field(2)
    group_id: int = betterproto.uint32_field(3)
    inst_id: int = betterproto.uint32_field(4)
    actor: "SceneActorInfo" = betterproto.message_field(5, group="entity")
    npc_monster: "SceneNpcMonsterInfo" = betterproto.message_field(6, group="entity")
    npc: "SceneNpcInfo" = betterproto.message_field(7, group="entity")
    prop: "ScenePropInfo" = betterproto.message_field(8, group="entity")


@dataclass(eq=False, repr=False)
class BuffInfo(betterproto.Message):
    buff_id: int = betterproto.uint32_field(1)
    level: int = betterproto.uint32_field(2)
    add_time_ms: int = betterproto.uint64_field(3)
    life_time: float = betterproto.float_field(4)
    count: int = betterproto.uint32_field(5)
    base_avatar_id: int = betterproto.uint32_field(6)
    dynamic_values: Dict[str, float] = betterproto.map_field(
        7, betterproto.TYPE_STRING, betterproto.TYPE_FLOAT
    )


@dataclass(eq=False, repr=False)
class EntityBuffInfo(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    buff_list: List["BuffInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SceneInfo(betterproto.Message):
    plane_id: int = betterproto.uint32_field(1)
    floor_id: int = betterproto.uint32_field(2)
    entity_list: List["SceneEntityInfo"] = betterproto.message_field(3)
    lighten_section_list: List[int] = betterproto.uint32_field(4)
    leader_entity_id: int = betterproto.uint32_field(5)
    entry_id: int = betterproto.uint32_field(6)
    env_buff_list: List["BuffInfo"] = betterproto.message_field(7)
    entity_buff_list: List["EntityBuffInfo"] = betterproto.message_field(8)
    game_mode_type: int = betterproto.uint32_field(9)


@dataclass(eq=False, repr=False)
class EntityMotion(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    motion: "MotionInfo" = betterproto.message_field(2)
    map_layer: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class SceneEntityMoveCsReq(betterproto.Message):
    entity_motion_list: List["EntityMotion"] = betterproto.message_field(1)
    entry_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SceneEntityMoveScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    download_data: "ClientDownloadData" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SceneEntityMoveScNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    motion: "MotionInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class InteractPropCsReq(betterproto.Message):
    prop_entity_id: int = betterproto.uint32_field(1)
    interact_id: int = betterproto.uint32_field(2)
    motion: "MotionInfo" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class InteractPropScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    prop_entity_id: int = betterproto.uint32_field(2)
    prop_state: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class SceneCastSkillCsReq(betterproto.Message):
    cast_entity_id: int = betterproto.uint32_field(1)
    skill_index: int = betterproto.uint32_field(2)
    ability_target_entity_id: int = betterproto.uint32_field(3)
    hit_target_entity_id_list: List[int] = betterproto.uint32_field(4)
    assist_monster_entity_id_list: List[int] = betterproto.uint32_field(5)
    target_motion: "MotionInfo" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class SceneCastSkillScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    battle_info: "SceneBattleInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SceneEnterStageCsReq(betterproto.Message):
    event_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SceneEnterStageScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    battle_info: "SceneBattleInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetCurSceneInfoCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetCurSceneInfoScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    scene: "SceneInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SceneEntityUpdateScNotify(betterproto.Message):
    entity_list: List["SceneEntityInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SceneEntityDisappearScNotify(betterproto.Message):
    entity_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SpringTransferCsReq(betterproto.Message):
    plane_id: int = betterproto.uint32_field(1)
    floor_id: int = betterproto.uint32_field(2)
    prop_entity_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class SpringTransferScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class UpdateBuffScNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    buff: "BuffInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class DelBuffScNotify(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    buff_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SpringRefreshCsReq(betterproto.Message):
    plane_id: int = betterproto.uint32_field(1)
    floor_id: int = betterproto.uint32_field(2)
    prop_entity_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class SpringRefreshScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class LastSpringRefreshTimeNotify(betterproto.Message):
    last_time: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class ReturnLastTownCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ReturnLastTownScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    scene: "SceneInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class EnterSectionCsReq(betterproto.Message):
    section_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class EnterSectionScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SetCurInteractEntityCsReq(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SetCurInteractEntityScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class RecoverAllLineupCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RecoverAllLineupScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SavePointsInfoNotify(betterproto.Message):
    valid_times: int = betterproto.uint32_field(1)
    refresh_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class StartCocoonStageCsReq(betterproto.Message):
    prop_entity_id: int = betterproto.uint32_field(1)
    cocoon_id: int = betterproto.uint32_field(2)
    wave: int = betterproto.uint32_field(3)
    world_level: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class StartCocoonStageScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    battle_info: "SceneBattleInfo" = betterproto.message_field(2)
    prop_entity_id: int = betterproto.uint32_field(3)
    cocoon_id: int = betterproto.uint32_field(4)
    wave: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class EntityBindPropCsReq(betterproto.Message):
    is_bind: bool = betterproto.bool_field(1)
    motion: "MotionInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class EntityBindPropScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SetClientPausedCsReq(betterproto.Message):
    paused: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class SetClientPausedScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    paused: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class UpdateBuffGroupStartScNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class UpdateBuffGroupEndScNotify(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ActivateFarmElementCsReq(betterproto.Message):
    entity_id: int = betterproto.uint32_field(1)
    world_level: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class ActivateFarmElementScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    entity_id: int = betterproto.uint32_field(2)
    world_level: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AvatarPresetHp(betterproto.Message):
    avatar_id: int = betterproto.uint32_field(1)
    preset_hp: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class SpringRecoverConfig(betterproto.Message):
    avatar_preset_hp_list: List["AvatarPresetHp"] = betterproto.message_field(1)
    auto_recover_hp: bool = betterproto.bool_field(2)
    default_hp: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class HealPoolInfo(betterproto.Message):
    heal_pool: int = betterproto.uint32_field(1)
    refresh_time: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GetSpringRecoverDataCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetSpringRecoverDataScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    spring_recover_config: "SpringRecoverConfig" = betterproto.message_field(2)
    heal_pool_info: "HealPoolInfo" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class SetSpringRecoverConfigCsReq(betterproto.Message):
    spring_recover_config: "SpringRecoverConfig" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SetSpringRecoverConfigScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    spring_recover_config: "SpringRecoverConfig" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SpringRecoverCsReq(betterproto.Message):
    plane_id: int = betterproto.uint32_field(1)
    floor_id: int = betterproto.uint32_field(2)
    prop_entity_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class SpringRecoverScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    heal_pool_info: "HealPoolInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class HealPoolInfoNotify(betterproto.Message):
    heal_pool_info: "HealPoolInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SpringRecoverSingleAvatarCsReq(betterproto.Message):
    plane_id: int = betterproto.uint32_field(1)
    floor_id: int = betterproto.uint32_field(2)
    prop_entity_id: int = betterproto.uint32_field(3)
    avatar_type: "AvatarType" = betterproto.enum_field(4)
    id: int = betterproto.uint32_field(5)
    recover_full: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class SpringRecoverSingleAvatarScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    avatar_type: "AvatarType" = betterproto.enum_field(2)
    id: int = betterproto.uint32_field(3)
    hp: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class Shop(betterproto.Message):
    shop_id: int = betterproto.uint32_field(1)
    begin_time: int = betterproto.uint32_field(2)
    end_time: int = betterproto.uint32_field(3)
    goods_list: List["Goods"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class Goods(betterproto.Message):
    goods_id: int = betterproto.uint32_field(1)
    buy_times: int = betterproto.uint32_field(2)
    begin_time: int = betterproto.uint32_field(3)
    end_time: int = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class GetShopListCsReq(betterproto.Message):
    shop_type: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetShopListScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    shop_list: List["Shop"] = betterproto.message_field(2)
    shop_type: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class BuyGoodsCsReq(betterproto.Message):
    shop_id: int = betterproto.uint32_field(1)
    goods_id: int = betterproto.uint32_field(2)
    goods_num: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class BuyGoodsScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    shop_id: int = betterproto.uint32_field(2)
    goods_id: int = betterproto.uint32_field(3)
    goods_buy_times: int = betterproto.uint32_field(4)
    return_item_list: "ItemList" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class Stage(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    win_times: int = betterproto.uint32_field(2)
    challenge_value: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class GetStageDataCsReq(betterproto.Message):
    stage_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetStageDataScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    stage_list: List["Stage"] = betterproto.message_field(2)
    is_all: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class StageBeginCsReq(betterproto.Message):
    stage_id: int = betterproto.uint32_field(1)
    lineup_index: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class StageBeginScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    logic_random_seed: int = betterproto.uint32_field(2)
    stage_id: int = betterproto.uint32_field(3)
    battle_avatar_list: List["BattleAvatar"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class BasicModuleSync(betterproto.Message):
    stamina: int = betterproto.uint32_field(1)
    week_cocoon_finished_count: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class RogueModuleSync(betterproto.Message):
    rogue_coin: int = betterproto.uint32_field(1)
    rogue_stamina: int = betterproto.uint32_field(2)
    rogue_explore_exp: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class AvatarSync(betterproto.Message):
    avatar_list: List["Avatar"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class MissionSync(betterproto.Message):
    mission_list: List["Mission"] = betterproto.message_field(1)
    finished_main_mission_id_list: List[int] = betterproto.uint32_field(2)
    del_mission_id_list: List[int] = betterproto.uint32_field(3)
    del_main_mission_id_list: List[int] = betterproto.uint32_field(4)


@dataclass(eq=False, repr=False)
class MissionEventSync(betterproto.Message):
    mission_event_list: List["Mission"] = betterproto.message_field(1)
    finished_mission_event_id_list: List[int] = betterproto.uint32_field(2)
    del_mission_event_id_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class PlayerSyncScNotify(betterproto.Message):
    basic_info: "PlayerBasicInfo" = betterproto.message_field(1)
    avatar_sync: "AvatarSync" = betterproto.message_field(2)
    equipment_list: List["Equipment"] = betterproto.message_field(3)
    del_equipment_list: List[int] = betterproto.uint32_field(4)
    material_list: List["Material"] = betterproto.message_field(5)
    quest_list: List["Quest"] = betterproto.message_field(6)
    mission_sync: "MissionSync" = betterproto.message_field(7)
    basic_module_sync: "BasicModuleSync" = betterproto.message_field(8)
    relic_list: List["Relic"] = betterproto.message_field(9)
    del_relic_list: List[int] = betterproto.uint32_field(10)
    mission_event_sync: "MissionEventSync" = betterproto.message_field(11)
    basic_type_info_list: List["HeroBasicTypeInfo"] = betterproto.message_field(12)
    rogue_item_list: List["Material"] = betterproto.message_field(13)
    rogue_module_sync: "RogueModuleSync" = betterproto.message_field(14)
    wait_del_resource_list: List["WaitDelResource"] = betterproto.message_field(15)
    total_achievement_exp: int = betterproto.uint32_field(16)
    new_item_hint_list: List[int] = betterproto.uint32_field(17)
    group_status_list: List["GroupStatus"] = betterproto.message_field(18)
    section_status_list: List["SectionStatus"] = betterproto.message_field(19)


@dataclass(eq=False, repr=False)
class GetNpcTakenRewardCsReq(betterproto.Message):
    npc_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetNpcTakenRewardScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    npc_id: int = betterproto.uint32_field(2)
    talk_event_list: List[int] = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class TakeTalkRewardCsReq(betterproto.Message):
    talk_event_id: int = betterproto.uint32_field(1)
    npc_location: "Vector" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class TakeTalkRewardScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    talk_event_id: int = betterproto.uint32_field(2)
    reward: "ItemList" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GetFirstTalkNpcCsReq(betterproto.Message):
    series_id_list: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class NpcMeetStatus(betterproto.Message):
    series_id: int = betterproto.uint32_field(1)
    is_meet: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class GetFirstTalkNpcScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    npc_meet_status_list: List["NpcMeetStatus"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class FinishFirstTalkNpcCsReq(betterproto.Message):
    series_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class FinishFirstTalkNpcScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    series_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class Tutorial(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    status: "TutorialStatus" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class TutorialGuide(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    status: "TutorialStatus" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class GetTutorialCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetTutorialScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    tutorial_list: List["Tutorial"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetTutorialGuideCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetTutorialGuideScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    tutorial_guide_list: List["TutorialGuide"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class UnlockTutorialCsReq(betterproto.Message):
    tutorial_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class UnlockTutorialScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    tutorial: "Tutorial" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class UnlockTutorialGuideCsReq(betterproto.Message):
    group_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class UnlockTutorialGuideScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    tutorial_guide: "TutorialGuide" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class FinishTutorialCsReq(betterproto.Message):
    tutorial_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class FinishTutorialScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    tutorial: "Tutorial" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class FinishTutorialGuideCsReq(betterproto.Message):
    group_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class FinishTutorialGuideScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    tutorial_guide: "TutorialGuide" = betterproto.message_field(2)
    reward: "ItemList" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class Waypoint(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    finish_times: int = betterproto.uint32_field(2)
    is_new: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class ChapterBrief(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    finish_challenge_num: int = betterproto.uint32_field(2)
    taken_reward_id_list: List[int] = betterproto.uint32_field(3)
    is_new: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class Chapter(betterproto.Message):
    brief_info: "ChapterBrief" = betterproto.message_field(1)
    waypoint_list: List["Waypoint"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetWaypointCsReq(betterproto.Message):
    chapter_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class GetWaypointScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    chapter: "Chapter" = betterproto.message_field(2)
    cur_waypoint_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class SetCurWaypointCsReq(betterproto.Message):
    waypoint_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class SetCurWaypointScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    cur_waypoint_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GetChapterCsReq(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetChapterScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    chapter_list: List["ChapterBrief"] = betterproto.message_field(2)
    cur_waypoint_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class WaypointShowNewCsNotify(betterproto.Message):
    waypoint_id: int = betterproto.uint32_field(1)
    chapter_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TakeChapterRewardCsReq(betterproto.Message):
    chapter_id: int = betterproto.uint32_field(1)
    chapter_reward_id: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class TakeChapterRewardScRsp(betterproto.Message):
    retcode: int = betterproto.uint32_field(1)
    chapter_id: int = betterproto.uint32_field(2)
    chapter_reward_id: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class PacketHead(betterproto.Message):
    packet_id: int = betterproto.uint32_field(1)
    sign_type: int = betterproto.uint32_field(2)
    sign: int = betterproto.uint32_field(3)
    user_id: int = betterproto.uint32_field(4)
    src_addr: int = betterproto.uint32_field(5)
    dst_addr: int = betterproto.uint32_field(6)
    dispatch_type: int = betterproto.uint32_field(7)
    server_type: int = betterproto.uint32_field(8)
    dispatch_key: int = betterproto.uint32_field(9)
    user_session_id: int = betterproto.uint32_field(10)
    id: int = betterproto.uint32_field(11)
    coroutine_id: int = betterproto.uint32_field(12)
    hop_cnt: int = betterproto.uint32_field(13)
